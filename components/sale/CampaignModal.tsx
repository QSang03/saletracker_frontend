"use client";

import React, {
  useState,
  useEffect,
  useRef,
  useCallback,
  useMemo,
} from "react";
import { AnimatePresence, motion } from "framer-motion";
import * as ExcelJS from "exceljs";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ServerResponseAlert } from "@/components/ui/loading/ServerResponseAlert";
import { MultiSelectCombobox } from "@/components/ui/MultiSelectCombobox";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import {
  Plus,
  Trash2,
  Upload,
  Image,
  Link,
  FileText,
  Sparkles,
  Calendar,
  Clock,
  Bell,
  Mail,
  Users,
  Check,
  ChevronRight,
  Target,
  Send,
  MessageSquare,
  Timer,
  CalendarCheck,
  Megaphone,
  Package,
  Briefcase,
  ArrowRight,
  CheckCircle2,
  AlertCircle,
  FileSpreadsheet,
  Download,
  X,
  Hash,
  AtSign,
} from "lucide-react";
import { cn } from "@/lib/utils";
import {
  CampaignType,
  CampaignFormData,
  Campaign,
  CampaignWithDetails,
} from "@/types";
import ModernTimePicker from "../common/ModernTimePicker";
import ModernAttachmentSelector from "../common/ModernAttachmentSelector";
import ModernDaySelector from "../common/ModernDaySelector"; // Import component m·ªõi
import { useDebounce, useDebouncedCallback } from "@/hooks/useDebounce";
import { campaignAPI } from "@/lib/campaign-api";
import EnhancedTextarea from "../common/EnhancedTextarea";
import StepIndicator from "./StepIndicator";

type SelectionMode = "single" | "adjacent" | "multiple";

interface CampaignModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (data: CampaignFormData) => Promise<void>;
  availableUsers?: Array<{ id: string; fullName: string; email: string }>;
  mode: "create" | "edit"; // Th√™m mode prop
  initialData?: CampaignWithDetails | null; // Th√™m initial data cho edit mode
}

const campaignTypeOptions = [
  {
    value: CampaignType.HOURLY_KM,
    label: "Ch∆∞∆°ng tr√¨nh KM 1 gi·ªù",
    icon: Timer,
    color: "from-blue-500 to-cyan-500",
    description: "G·ª≠i tin nh·∫Øn theo gi·ªù",
    emoji: "‚è∞",
  },
  {
    value: CampaignType.DAILY_KM,
    label: "Ch∆∞∆°ng tr√¨nh KM 1 ng√†y",
    icon: CalendarCheck,
    color: "from-purple-500 to-pink-500",
    description: "Chi·∫øn d·ªãch h√†ng ng√†y",
    emoji: "üìÖ",
  },
  {
    value: CampaignType.THREE_DAY_KM,
    label: "Ch∆∞∆°ng tr√¨nh KM trong 3 ng√†y",
    icon: Calendar,
    color: "from-orange-500 to-red-500",
    description: "K√©o d√†i 3 ng√†y li√™n ti·∫øp",
    emoji: "üóìÔ∏è",
  },
  {
    value: CampaignType.WEEKLY_SP,
    label: "Ch∆∞∆°ng tr√¨nh g·ª≠i SP 1 tu·∫ßn / l·∫ßn",
    icon: Package,
    color: "from-green-500 to-emerald-500",
    description: "S·∫£n ph·∫©m h√†ng tu·∫ßn",
    emoji: "üì¶",
  },
  {
    value: CampaignType.WEEKLY_BBG,
    label: "Ch∆∞∆°ng tr√¨nh g·ª≠i BBG 1 tu·∫ßn / l·∫ßn",
    icon: Briefcase,
    color: "from-indigo-500 to-purple-500",
    description: "B√°o gi√° h√†ng tu·∫ßn",
    emoji: "üíº",
  },
];

interface ReminderItem {
  content: string;
  minutes: number;
}

// Enhanced Text Counter
const TextCounter = ({ current, max }: { current: number; max: number }) => {
  const percentage = (current / max) * 100;
  const isWarning = percentage > 70;
  const isDanger = percentage > 90;

  return (
    <motion.span
      className={cn(
        "text-xs transition-colors duration-200",
        isWarning && !isDanger && "text-amber-600",
        isDanger && "text-red-600",
        !isWarning && "text-gray-500"
      )}
      animate={{
        scale: isDanger ? [1, 1.05, 1] : 1,
        color: isDanger ? "#ef4444" : isWarning ? "#f59e0b" : "#6b7280",
      }}
      transition={isDanger ? { duration: 1, repeat: Infinity } : {}}
    >
      {current}/{max}
    </motion.span>
  );
};

export default function CampaignModal({
  open,
  onOpenChange,
  onSubmit,
  availableUsers = [],
  mode = "create",
  initialData = null,
}: CampaignModalProps) {
  // Memoized insertButtons ƒë·ªÉ tr√°nh re-creation m·ªói render
  const messageInsertButtons = useMemo(
    () => [
      {
        text: "{you}",
        icon: Users,
        color: "#3b82f6", // Ocean Blue
        hoverColor: "#2563eb",
        label: "T√™n ng∆∞·ªùi nh·∫≠n",
        id: "insert-you",
      },
      {
        text: "{me}",
        icon: AtSign,
        color: "#ec4899", // Hot Pink
        hoverColor: "#db2777",
        label: "T√™n ng∆∞·ªùi g·ª≠i",
        id: "insert-me",
      },
    ],
    []
  );

  const reminderInsertButtons = useMemo(
    () => [
      {
        text: "{you}",
        icon: Users,
        color: "#3b82f6",
        hoverColor: "#2563eb",
        label: "T√™n ng∆∞·ªùi nh·∫≠n",
        id: "reminder-insert-you",
      },
      {
        text: "{me}",
        icon: AtSign,
        color: "#ec4899",
        hoverColor: "#db2777",
        label: "T√™n ng∆∞·ªùi g·ª≠i",
        id: "reminder-insert-me",
      },
    ],
    []
  );

  // State management
  const [currentTab, setCurrentTab] = useState("basic");
  const [campaignName, setCampaignName] = useState("");
  const [selectedType, setSelectedType] = useState<CampaignType | "">("");
  const [startTime, setStartTime] = useState("");
  const [endTime, setEndTime] = useState("");
  const [messageContent, setMessageContent] = useState("");
  const [attachmentType, setAttachmentType] = useState<
    "image" | "link" | "file" | null
  >(null);
  const [attachmentData, setAttachmentData] = useState<string>("");

  // Enhanced day selection states
  const [selectedDays, setSelectedDays] = useState<number | number[]>([]);
  const [daySelectionMode, setDaySelectionMode] =
    useState<SelectionMode>("single");
  const [includeSaturday, setIncludeSaturday] = useState(true);

  const [timeOfDay, setTimeOfDay] = useState("");
  const [reminders, setReminders] = useState<ReminderItem[]>([
    { content: "", minutes: 30 },
  ]);
  const [recipientsTo, setRecipientsTo] = useState("");
  const [recipientsCc, setRecipientsCc] = useState<string[]>([]);
  const [reportInterval, setReportInterval] = useState("60");
  const [stopSendingTime, setStopSendingTime] = useState("17:45");
  const [customEmails, setCustomEmails] = useState<string[]>([""]);
  const [customerFile, setCustomerFile] = useState<File | null>(null);
  const [uploadedCustomers, setUploadedCustomers] = useState<
    Array<{ phone_number: string; full_name: string; salutation?: string }>
  >([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);

  const debouncedCampaignName = useDebounce(campaignName, 300);
  const debouncedMessageContent = useDebounce(messageContent, 400);
  const [usersWithEmail, setUsersWithEmail] = useState<
    Array<{
      id: number;
      fullName: string;
      email: string;
      employeeCode?: string;
    }>
  >([]);
  const [loadingUsers, setLoadingUsers] = useState(false);
  const [emailReportsEnabled, setEmailReportsEnabled] = useState(false);
  const [emailSendMode, setEmailSendMode] = useState<"interval" | "completion">(
    "interval"
  );
  // ‚úÖ SIMPLIFIED ALERT SYSTEM
  const [alert, setAlert] = useState<{
    type: "success" | "error" | "warning" | "info";
    message: string;
    id: string;
  } | null>(null);

  const [messageValidationError, setMessageValidationError] = useState<
    string | null
  >(null);
  const [reminderValidationErrors, setReminderValidationErrors] = useState<
    (string | null)[]
  >([null]);
  const [attachmentValidationError, setAttachmentValidationError] = useState<
    string | null
  >(null);
  const [visitedSteps, setVisitedSteps] = useState<Set<number>>(new Set([1]));
  const [attachmentMetadata, setAttachmentMetadata] = useState<{
    filename?: string;
    size?: number;
    type?: string;
  } | null>(null);

  const handleMessageValidationChange = useCallback((error: string | null) => {
    setMessageValidationError(error);
  }, []);

  const handleReminderValidationChange = useCallback(
    (index: number, error: string | null) => {
      setReminderValidationErrors((prev) => {
        const newErrors = [...prev];
        newErrors[index] = error;
        return newErrors;
      });
    },
    []
  );

  const setAlertSafe = useCallback(
    (
      alertData: {
        type: "success" | "error" | "warning" | "info";
        message: string;
      } | null
    ) => {
      if (alertData === null) {
        setAlert(null);
        return;
      }

      const alertId = `alert_${Date.now()}_${Math.random()
        .toString(36)
        .substr(2, 9)}`;
      setAlert({
        ...alertData,
        id: alertId,
      });

      // Auto-hide success/info alerts after 5 seconds
      if (alertData.type === "success" || alertData.type === "info") {
        setTimeout(() => {
          setAlert((current) => (current?.id === alertId ? null : current));
        }, 5000);
      }
    },
    []
  );

  const loadUsersWithEmail = useCallback(async () => {
    try {
      setLoadingUsers(true);
      const users = await campaignAPI.getUsersWithEmail();
      setUsersWithEmail(users);
    } catch (error) {
      console.error("Error loading users with email:", error);
      setUsersWithEmail([]);
    } finally {
      setLoadingUsers(false);
    }
  }, []);

  const loadCampaignData = useCallback((campaign: CampaignWithDetails) => {
    setCampaignName(campaign.name);
    setSelectedType(campaign.campaign_type);

    // Load message content
    if (campaign.messages?.text) {
      setMessageContent(campaign.messages.text);
    }

    // Load attachment if exists
    if (campaign.messages?.attachment) {
      setAttachmentType(campaign.messages.attachment.type);
      if (campaign.messages.attachment.type === "link") {
        setAttachmentData(campaign.messages.attachment.url || "");
      } else if (
        campaign.messages.attachment.type === "image" ||
        campaign.messages.attachment.type === "file"
      ) {
        setAttachmentData(campaign.messages.attachment.base64 || "");
        if (campaign.messages.attachment.filename) {
          setAttachmentMetadata({
            filename: campaign.messages.attachment.filename,
            // Size v√† type c√≥ th·ªÉ kh√¥ng c√≥ trong API response
            size: undefined,
            type: undefined,
          });
        } else {
          setAttachmentMetadata(null);
        }
      }
    }

    // Load schedule config
    if (campaign.schedule_config) {
      const config = campaign.schedule_config;

      if (config.type === "hourly") {
        setStartTime(config.start_time || "");
        setEndTime(config.end_time || "");
      } else if (config.type === "3_day") {
        setSelectedDays(config.days_of_week || []);
        setTimeOfDay(config.time_of_day || "");
      } else if (config.type === "weekly") {
        setSelectedDays(config.day_of_week || 0);
        setTimeOfDay(config.time_of_day || "");
      }
    } else {
      console.warn("No schedule_config found"); // Debug log
      // Set default values based on campaign type
      if (
        campaign.campaign_type === CampaignType.HOURLY_KM ||
        campaign.campaign_type === CampaignType.DAILY_KM
      ) {
        setStartTime("");
        setEndTime("");
      } else {
        setSelectedDays([]);
        setTimeOfDay("");
      }
    }

    // Load reminders
    if (campaign.reminders && campaign.reminders.length > 0) {
      setReminders(campaign.reminders);
    } else {
      // Reset to default if no reminders
      setReminders([{ content: "", minutes: 30 }]);
    }

    // Load email reports
    if (campaign.email_reports) {
      setEmailReportsEnabled(true);
      const reports = campaign.email_reports;

      setEmailSendMode(
        reports.send_when_campaign_completed ? "completion" : "interval"
      );
      setReportInterval((reports.report_interval_minutes || 60).toString());
      setStopSendingTime(
        reports.stop_sending_at_time?.replace(":00", "") || ""
      );
    } else {
      setEmailReportsEnabled(false);
      setEmailSendMode("interval");
      setReportInterval("60");
      setStopSendingTime("");
    }

    // Load customers
    if (campaign.customers && campaign.customers.length > 0) {
      setUploadedCustomers(campaign.customers);
    } else {
      setUploadedCustomers([]);
    }
  }, []);

  // Reset form function - simplified without alertRef dependency
  const resetForm = useCallback(() => {
    // Reset all form states
    setCurrentTab("basic");
    setCampaignName("");
    setSelectedType("");
    setStartTime("");
    setEndTime("");
    setSelectedDays([]);
    setDaySelectionMode("single");
    setIncludeSaturday(true);
    setTimeOfDay("");
    setMessageContent("");
    setAttachmentType(null);
    setAttachmentData("");
    setReminders([{ content: "", minutes: 30 }]);
    setEmailSendMode("interval");
    setEmailReportsEnabled(false);
    setVisitedSteps(new Set([1]));
    setAttachmentMetadata(null);

    // Reset email states
    setRecipientsTo("");
    setRecipientsCc([]);
    setCustomEmails([""]);
    setReportInterval("60");
    setStopSendingTime("");

    // Reset customer states
    setCustomerFile(null);
    setUploadedCustomers([]);

    // Reset UI states
    setIsSubmitting(false);
    setShowSuccess(false);

    // Reset alert (only if not error/warning)
    setAlert((current) => {
      if (current?.type === "error" || current?.type === "warning") {
        return current; // Keep error/warning alerts
      }
      return null;
    });
  }, []); // No dependencies

  useEffect(() => {
    if (!open) {
      const timer = setTimeout(() => {
        // Only reset in create mode and when no error/warning alerts
        if (mode === "create") {
          const hasErrorAlert =
            alert?.type === "error" || alert?.type === "warning";
          if (!hasErrorAlert) {
            resetForm();
          }
        }
      }, 500);

      return () => clearTimeout(timer);
    }
  }, [open, mode, resetForm, alert?.type]);

  // ‚úÖ S·ª¨A LOGIC - T√ÅCH RI√äNG RECIPIENTS_TO RA KH·ªéI PH√ÇN LO·∫†I
  useEffect(() => {
    if (
      mode === "edit" &&
      initialData?.email_reports &&
      usersWithEmail.length > 0
    ) {
      const { recipients_to, recipients_cc } = initialData.email_reports;

      // Set recipients_to ƒë·∫ßu ti√™n
      let primaryRecipient = "";
      if (typeof recipients_to === "string" && recipients_to.trim()) {
        primaryRecipient = recipients_to.trim();
        setRecipientsTo(primaryRecipient);
      }

      // X·ª≠ l√Ω recipients_cc
      const allCcEmails: string[] = [];
      if (Array.isArray(recipients_cc)) {
        allCcEmails.push(...recipients_cc.map((e) => e.trim()).filter(Boolean));
      }

      // Ph√¢n lo·∫°i system v√† external emails
      const normalizedSystemEmails = usersWithEmail.map((u) =>
        u.email.trim().toLowerCase()
      );

      const systemEmails: string[] = [];
      const externalEmails: string[] = [];

      allCcEmails.forEach((email) => {
        const normalizedEmail = email.trim().toLowerCase();
        const isPrimary = normalizedEmail === primaryRecipient.toLowerCase();

        if (!isPrimary) {
          // Kh√¥ng ph·∫£i email ch√≠nh
          if (normalizedSystemEmails.includes(normalizedEmail)) {
            systemEmails.push(email);
          } else {
            externalEmails.push(email);
          }
        }
      });

      // Set v√†o UI
      setRecipientsCc(systemEmails);
      setCustomEmails(
        externalEmails.length > 0 ? [...externalEmails, ""] : [""]
      );
    }
  }, [usersWithEmail, mode, initialData]);

  // Tab navigation logic
  const canProceedFromTab1 = Boolean(campaignName?.trim() && selectedType);

  // For edit mode, allow proceeding to tab 2 even if some data is missing
  const canProceedFromTab2 = Boolean(
    // Validation error lu√¥n ƒë∆∞·ª£c check tr∆∞·ªõc
    messageValidationError === null &&
      attachmentValidationError === null && // ‚úÖ Ki·ªÉm tra attachment validation
      (mode === "edit" || // Edit mode ch·ªâ skip required field validation
        (messageContent?.trim() &&
          // Attachment is now required, so we check it implicitly through validation
          (selectedType === CampaignType.HOURLY_KM ||
          selectedType === CampaignType.DAILY_KM
            ? startTime && endTime
            : selectedType === CampaignType.THREE_DAY_KM
            ? Array.isArray(selectedDays)
              ? selectedDays.length > 0 && timeOfDay
              : selectedDays && timeOfDay
            : selectedType === CampaignType.WEEKLY_SP ||
              selectedType === CampaignType.WEEKLY_BBG
            ? selectedDays && timeOfDay
            : false)))
  );

  const needsReminderTab =
    selectedType === CampaignType.HOURLY_KM ||
    selectedType === CampaignType.DAILY_KM;

  // For edit mode, allow proceeding to tab 3 even if some data is missing

  const canProceedFromTab3 = Boolean(
    // Validation error lu√¥n ƒë∆∞·ª£c check tr∆∞·ªõc
    reminderValidationErrors.every((error) => error === null) &&
      (mode === "edit" || // Edit mode ch·ªâ skip required field validation
        !needsReminderTab ||
        reminders.every((r) => r.content?.trim() && r.minutes > 0))
  );

  // Memoize complex computed values to prevent unnecessary re-renders
  const tabLabels = useMemo(() => {
    const labels = ["Th√¥ng tin", "L·ªãch tr√¨nh"];
    if (needsReminderTab) labels.push("Nh·∫Øc l·∫°i");
    labels.push("Email", "Kh√°ch h√†ng");
    return labels;
  }, [needsReminderTab]);

  const currentStepNumber = useMemo(() => {
    const steps = ["basic", "schedule", "reminders", "email", "customers"];
    if (!needsReminderTab) steps.splice(2, 1);
    return steps.indexOf(currentTab) + 1;
  }, [currentTab, needsReminderTab]);

  const getStepErrors = useMemo(() => {
    const stepErrors: Record<number, boolean> = {};

    // ‚úÖ CH·ªà VALIDATE C√ÅC STEP ƒê√É TRUY C·∫¨P HO·∫∂C STEP HI·ªÜN T·∫†I
    const currentStepNumber =
      ["basic", "schedule", "reminders", "email", "customers"]
        .filter((tab) => needsReminderTab || tab !== "reminders")
        .indexOf(currentTab) + 1;

    // Step 1: Basic Info - ch·ªâ validate khi ƒë√£ truy c·∫≠p ho·∫∑c ƒëang ·ªü step n√†y
    if (visitedSteps.has(1) || currentStepNumber === 1) {
      stepErrors[1] = !canProceedFromTab1;
    }

    // Step 2: Schedule & Content - ch·ªâ validate khi ƒë√£ truy c·∫≠p ho·∫∑c ƒëang ·ªü step n√†y
    if (visitedSteps.has(2) || currentStepNumber === 2) {
      stepErrors[2] =
        !canProceedFromTab2 ||
        messageValidationError !== null ||
        attachmentValidationError !== null;
    }

    // Step 3: Reminders (n·∫øu c·∫ßn) - ch·ªâ validate khi ƒë√£ truy c·∫≠p ho·∫∑c ƒëang ·ªü step n√†y
    if (needsReminderTab) {
      if (visitedSteps.has(3) || currentStepNumber === 3) {
        stepErrors[3] =
          !canProceedFromTab3 ||
          reminderValidationErrors.some((error) => error !== null);
      }

      // Email v√† Customer steps shift
      stepErrors[4] = false; // Email kh√¥ng c√≥ validation b·∫Øt bu·ªôc
      stepErrors[5] = false; // Customers kh√¥ng c√≥ validation b·∫Øt bu·ªôc
    } else {
      // Kh√¥ng c√≥ reminder tab
      stepErrors[3] = false; // Email
      stepErrors[4] = false; // Customers
    }

    return stepErrors;
  }, [
    visitedSteps,
    currentTab,
    needsReminderTab,
    canProceedFromTab1,
    canProceedFromTab2,
    messageValidationError,
    attachmentValidationError,
    canProceedFromTab3,
    reminderValidationErrors,
  ]);

  const totalSteps = useMemo(
    () => (needsReminderTab ? 5 : 4),
    [needsReminderTab]
  );

  const progress = useMemo(() => {
    let calculatedProgress = 0;
    const progressPerStep = 100 / totalSteps;

    // Ch·ªâ t√≠nh progress cho c√°c step ƒë√£ ho√†n th√†nh (kh√¥ng c√≥ l·ªói)
    for (let step = 1; step <= totalSteps; step++) {
      if (visitedSteps.has(step)) {
        // Step ƒë√£ truy c·∫≠p v√† kh√¥ng c√≥ l·ªói
        if (!getStepErrors[step]) {
          calculatedProgress += progressPerStep;
        } else {
          // Step c√≥ l·ªói ch·ªâ t√≠nh 50% progress
          calculatedProgress += progressPerStep * 0.5;
        }
      }
    }

    return Math.min(calculatedProgress, 100);
  }, [visitedSteps, getStepErrors, totalSteps]);

  useEffect(() => {
    if (mode === "edit" && initialData && open) {
      console.log("üìù Loading campaign data for edit mode:", initialData);
      loadCampaignData(initialData);

      // Trong edit mode, cho ph√©p truy c·∫≠p t·∫•t c·∫£ steps
      const allSteps = new Set(
        Array.from({ length: totalSteps }, (_, i) => i + 1)
      );
      setVisitedSteps(allSteps);
    }
  }, [mode, initialData, open, totalSteps, loadCampaignData]);

  useEffect(() => {
    if (open) {
      loadUsersWithEmail();
    }
  }, [open, loadUsersWithEmail]);
  useEffect(() => {
    if (mode === "edit" && initialData && open) {
      console.log("üìù Loading campaign data for edit mode:", initialData);
      loadCampaignData(initialData);

      // Trong edit mode, cho ph√©p truy c·∫≠p t·∫•t c·∫£ steps
      const allSteps = new Set(
        Array.from({ length: totalSteps }, (_, i) => i + 1)
      );
      setVisitedSteps(allSteps);
    }
  }, [mode, initialData, open, totalSteps, loadCampaignData]);

  // Enhanced day selection logic - memoized
  const handleDaySelectionChange = useCallback(
    (days: number | number[]) => {
      if (selectedType === CampaignType.THREE_DAY_KM) {
        // For 3-day campaigns, use adjacent mode
        setDaySelectionMode("adjacent");
        setSelectedDays(days);
      } else if (
        selectedType === CampaignType.WEEKLY_SP ||
        selectedType === CampaignType.WEEKLY_BBG
      ) {
        // For weekly campaigns, use single mode
        setDaySelectionMode("single");
        setSelectedDays(days);
      }
    },
    [selectedType]
  );

  const handleDaySelectionModeChange = useCallback((mode: SelectionMode) => {
    setDaySelectionMode(mode);
    // Reset selection when changing mode
    setSelectedDays(mode === "single" ? 0 : []);
  }, []);

  // Helper functions - memoized to prevent unnecessary re-renders
  const addReminder = useCallback(() => {
    setReminders((prev) => [...prev, { content: "", minutes: 30 }]);
    setReminderValidationErrors((prev) => [...prev, null]);
  }, []);

  const removeReminder = useCallback((index: number) => {
    setReminders((prev) =>
      prev.length > 1 ? prev.filter((_, i) => i !== index) : prev
    );
    setReminderValidationErrors((prev) =>
      prev.length > 1 ? prev.filter((_, i) => i !== index) : prev
    );
  }, []);

  const updateReminder = useCallback(
    (index: number, field: keyof ReminderItem, value: string | number) => {
      setReminders((prev) =>
        prev.map((reminder, i) =>
          i === index ? { ...reminder, [field]: value } : reminder
        )
      );
    },
    []
  );

  const addCustomEmail = useCallback(() => {
    setCustomEmails((prev) => [...prev, ""]);
  }, []);

  const removeCustomEmail = useCallback((index: number) => {
    setCustomEmails((prev) =>
      prev.length > 1 ? prev.filter((_, i) => i !== index) : prev
    );
  }, []);

  const updateCustomEmail = useCallback((index: number, value: string) => {
    setCustomEmails((prev) =>
      prev.map((email, i) => (i === index ? value : email))
    );
  }, []);

  // Simplified alert handlers
  const handleCloseAlert = useCallback(() => {
    setAlert((current) => {
      // Don't close error/warning alerts automatically
      if (current?.type === "error" || current?.type === "warning") {
        return current;
      }
      return null;
    });
  }, []);

  const handleManualCloseAlert = useCallback(() => {
    setAlert(null);
  }, []);

  useEffect(() => {
    const currentStepNumber =
      ["basic", "schedule", "reminders", "email", "customers"]
        .filter((tab) => needsReminderTab || tab !== "reminders")
        .indexOf(currentTab) + 1;

    setVisitedSteps((prev) => new Set([...prev, currentStepNumber]));
  }, [currentTab, needsReminderTab]);

  const handleCSVFallback = useCallback(
    async (file: File, originalExcelError: any): Promise<boolean> => {
      try {
        const text = await new Promise<string>((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = (e) => resolve((e.target?.result as string) || "");
          reader.onerror = () => reject(new Error("FileReader failed"));
          reader.readAsText(file);
        });

        // Check empty file
        if (!text || text.trim() === "") {
          setAlertSafe({
            type: "error",
            message: `‚ùå L·ªói ƒë·ªçc file!

            üìã Excel: ${
              originalExcelError instanceof Error
                ? originalExcelError.message
                : "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
            }
            üìã CSV: File tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá

            üí° Vui l√≤ng:
            ‚Ä¢ Ki·ªÉm tra file c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng
            ‚Ä¢ Th·ª≠ t·∫£i file m·∫´u v√† l√†m l·∫°i
            ‚Ä¢ ƒê·∫£m b·∫£o file kh√¥ng b·ªã h·ªèng`,
          });
          return false;
        }

        const lines = text.split("\n").filter((line) => line.trim());
        if (lines.length === 0) {
          setAlertSafe({
            type: "error",
            message: `‚ùå File kh√¥ng c√≥ d·ªØ li·ªáu!

            üìã Excel: ${
              originalExcelError instanceof Error
                ? originalExcelError.message
                : "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
            }
            üìã CSV: Kh√¥ng c√≥ d√≤ng d·ªØ li·ªáu h·ª£p l·ªá

            üí° Vui l√≤ng ki·ªÉm tra l·∫°i file v√† th·ª≠ l·∫°i!`,
          });
          return false;
        }

        // Parse CSV headers
        const header = lines[0].split(",").map((h) => h.trim().toUpperCase());
        const csvFoundHeaders = header.map((h, idx) => h || `C·ªòT ${idx + 1}`);

        let fullNameIdx = -1,
          phoneNumberIdx = -1,
          salutationIdx = -1;
        header.forEach((h, idx) => {
          if (h === "T√äN KH√ÅCH H√ÄNG") fullNameIdx = idx;
          if (h === "S·ªê ƒêI·ªÜN THO·∫†I") phoneNumberIdx = idx;
          if (h === "NG∆Ø·ªúI LI√äN H·ªÜ") salutationIdx = idx;
        });

        // Check required headers
        const csvMissingHeaders: string[] = [];
        if (fullNameIdx === -1) csvMissingHeaders.push("T√äN KH√ÅCH H√ÄNG");
        if (phoneNumberIdx === -1) csvMissingHeaders.push("S·ªê ƒêI·ªÜN THO·∫†I");

        if (csvMissingHeaders.length > 0) {
          setAlertSafe({
            type: "error",
            message: `‚ùå C·∫£ Excel v√† CSV ƒë·ªÅu sai ƒë·ªãnh d·∫°ng header!

            üìã Excel: ${
              originalExcelError instanceof Error
                ? originalExcelError.message
                : "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
            }
            üìã CSV thi·∫øu c·ªôt: ${csvMissingHeaders.join(", ")}

            üîç Header CSV hi·ªán t·∫°i: ${csvFoundHeaders.join(", ")}

            ‚úÖ Header c·∫ßn c√≥:
            ‚Ä¢ T√äN KH√ÅCH H√ÄNG (b·∫Øt bu·ªôc)
            ‚Ä¢ S·ªê ƒêI·ªÜN THO·∫†I (b·∫Øt bu·ªôc)
            ‚Ä¢ NG∆Ø·ªúI LI√äN H·ªÜ (t√πy ch·ªçn)

            üí° Vui l√≤ng t·∫£i file m·∫´u v√† l√†m theo ƒë√∫ng ƒë·ªãnh d·∫°ng!`,
          });
          return false;
        }

        // Parse customer data
        const csvCustomers = lines
          .slice(1)
          .map((line) => {
            const columns = line.split(",");
            const fullName =
              fullNameIdx >= 0 ? columns[fullNameIdx]?.trim() || "" : "";
            const phoneNumber =
              phoneNumberIdx >= 0 ? columns[phoneNumberIdx]?.trim() || "" : "";
            const salutation =
              salutationIdx >= 0 ? columns[salutationIdx]?.trim() || "" : "";

            return {
              phone_number: phoneNumber,
              full_name: fullName,
              salutation,
            };
          })
          .filter((customer) => customer.phone_number && customer.full_name);

        if (csvCustomers.length === 0) {
          setAlertSafe({
            type: "error",
            message: `‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá!

            üìã Excel: ${
              originalExcelError instanceof Error
                ? originalExcelError.message
                : "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
            }
            üìã CSV: C√≥ d·ªØ li·ªáu nh∆∞ng kh√¥ng h·ª£p l·ªá

            üí° Vui l√≤ng ki·ªÉm tra:
            ‚Ä¢ C√°c d√≤ng d·ªØ li·ªáu c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin kh√¥ng?
            ‚Ä¢ ƒê·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i v√† t√™n c√≥ ch√≠nh x√°c kh√¥ng?`,
          });
          return false;
        }

        setUploadedCustomers(csvCustomers);

        // ‚úÖ DELAY QUAN TR·ªåNG ƒê·ªÇ ƒê·∫¢M B·∫¢O CUSTOMERS ƒê√É ƒê∆Ø·ª¢C SET XONG
        await new Promise((resolve) => setTimeout(resolve, 300));

        setAlertSafe({
          type: "warning",
          message: `‚ö†Ô∏è Excel l·ªói nh∆∞ng ƒë√£ import CSV th√†nh c√¥ng!

          ‚úÖ Import th√†nh c√¥ng ${csvCustomers.length} kh√°ch h√†ng t·ª´ CSV

          ‚ÑπÔ∏è L·ªói Excel: ${
            originalExcelError instanceof Error
              ? originalExcelError.message
              : "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
          }

          üí° Khuy·∫øn ngh·ªã: S·ª≠ d·ª•ng file Excel (.xlsx) ƒë·ªÉ c√≥ hi·ªáu su·∫•t t·ªët h∆°n!`,
        });
        return true;
      } catch (error) {
        console.error("üí• [CSV FALLBACK] Failed:", error);
        setAlertSafe({
          type: "error",
          message: `‚ùå L·ªói nghi√™m tr·ªçng khi x·ª≠ l√Ω file!

          üìã Excel: ${
            originalExcelError instanceof Error
              ? originalExcelError.message
              : "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
          }
          üìã CSV: ${error instanceof Error ? error.message : "Kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c"}

          üí° Vui l√≤ng:
          ‚Ä¢ Ki·ªÉm tra file c√≥ b·ªã h·ªèng kh√¥ng
          ‚Ä¢ Th·ª≠ t·∫£i file m·∫´u v√† l√†m l·∫°i
          ‚Ä¢ Li√™n h·ªá h·ªó tr·ª£ n·∫øu v·∫´n l·ªói`,
        });
        return false;
      }
    },
    [setAlertSafe]
  );

  const handleCustomerFileUpload = useCallback(
    async (event: React.ChangeEvent<HTMLInputElement>) => {
      const file = event.target.files?.[0];
      if (!file) {
        return;
      }

      // ‚úÖ VALIDATION FILE TR∆Ø·ªöC KHI X·ª¨ L√ù
      const maxSize = 10 * 1024 * 1024; // 10MB
      const allowedTypes = [
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", // .xlsx
        "application/vnd.ms-excel", // .xls
        "text/csv",
        "application/csv",
      ];

      if (file.size > maxSize) {
        setAlertSafe({
          type: "error",
          message: `‚ùå File qu√° l·ªõn!

          üìä K√≠ch th∆∞·ªõc file: ${(file.size / 1024 / 1024).toFixed(2)}MB
          üìä Gi·ªõi h·∫°n cho ph√©p: 10MB

          üí° Vui l√≤ng:
          ‚Ä¢ Gi·∫£m s·ªë l∆∞·ª£ng kh√°ch h√†ng trong file
          ‚Ä¢ N√©n file tr∆∞·ªõc khi upload
          ‚Ä¢ Chia nh·ªè file th√†nh nhi·ªÅu ph·∫ßn`,
        });
        event.target.value = "";
        return;
      }

      if (
        !allowedTypes.includes(file.type) &&
        !file.name.toLowerCase().match(/\.(xlsx|xls|csv)$/)
      ) {
        setAlertSafe({
          type: "error",
          message: `‚ùå ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!

          üìã File hi·ªán t·∫°i: ${file.type || "Kh√¥ng x√°c ƒë·ªãnh"}
          üìã T√™n file: ${file.name}

          ‚úÖ ƒê·ªãnh d·∫°ng ƒë∆∞·ª£c h·ªó tr·ª£:
          ‚Ä¢ Excel (.xlsx, .xls)
          ‚Ä¢ CSV (.csv)

          üí° Vui l√≤ng ch·ªçn file ƒë√∫ng ƒë·ªãnh d·∫°ng!`,
        });
        event.target.value = "";
        return;
      }

      setCustomerFile(file);

      try {
        const workbook = new ExcelJS.Workbook();
        const arrayBuffer = await file.arrayBuffer();

        await workbook.xlsx.load(arrayBuffer);

        const worksheet = workbook.getWorksheet(1);
        if (!worksheet) {
          setAlertSafe({
            type: "error",
            message: `‚ùå Kh√¥ng t√¨m th·∫•y worksheet trong file Excel!

            üìã File: ${file.name}
            üìã Lo·∫°i: ${file.type}

            üí° Vui l√≤ng:
            ‚Ä¢ ƒê·∫£m b·∫£o file Excel c√≥ √≠t nh·∫•t 1 sheet
            ‚Ä¢ Th·ª≠ m·ªü file b·∫±ng Excel ƒë·ªÉ ki·ªÉm tra
            ‚Ä¢ T·∫£i file m·∫´u v√† l√†m theo ƒë√∫ng ƒë·ªãnh d·∫°ng`,
          });
          event.target.value = "";
          return;
        }
        const customers: Array<{
          phone_number: string;
          full_name: string;
          salutation?: string;
        }> = [];

        // ‚úÖ KI·ªÇM TRA WORKSHEET C√ì D·ªÆ LI·ªÜU KH√îNG
        if (worksheet.rowCount <= 1) {
          setAlertSafe({
            type: "error",
            message: `‚ùå Worksheet tr·ªëng!

            üìã File: ${file.name}
            üìã S·ªë d√≤ng: ${worksheet.rowCount}

            üí° Vui l√≤ng:
            ‚Ä¢ ƒê·∫£m b·∫£o file c√≥ d·ªØ li·ªáu (√≠t nh·∫•t 2 d√≤ng)
            ‚Ä¢ D√≤ng 1: Ti√™u ƒë·ªÅ c·ªôt
            ‚Ä¢ D√≤ng 2+: D·ªØ li·ªáu kh√°ch h√†ng`,
          });
          event.target.value = "";
          return;
        }

        // Read headers
        const headerRow = worksheet.getRow(1);
        let fullNameCol = 0,
          phoneNumberCol = 0,
          salutationCol = 0;
        const foundHeaders: string[] = [];

        headerRow.eachCell((cell, colNumber) => {
          const value = cell.value?.toString().trim().toUpperCase();
          foundHeaders.push(value || `C·ªòT ${colNumber}`);
          if (value === "T√äN KH√ÅCH H√ÄNG") fullNameCol = colNumber;
          if (value === "S·ªê ƒêI·ªÜN THO·∫†I") phoneNumberCol = colNumber;
          if (value === "NG∆Ø·ªúI LI√äN H·ªÜ") salutationCol = colNumber;
        });

        // Check required headers
        const missingHeaders: string[] = [];
        if (!fullNameCol) missingHeaders.push("T√äN KH√ÅCH H√ÄNG");
        if (!phoneNumberCol) missingHeaders.push("S·ªê ƒêI·ªÜN THO·∫†I");

        if (missingHeaders.length > 0) {
          setAlertSafe({
            type: "error",
            message: `‚ùå Sai ƒë·ªãnh d·∫°ng header! Thi·∫øu c·ªôt: ${missingHeaders.join(
              ", "
            )}

            üìã File: ${file.name}
            üîç Header hi·ªán t·∫°i: ${foundHeaders.join(", ")}

            ‚úÖ Header c·∫ßn c√≥:
            ‚Ä¢ T√äN KH√ÅCH H√ÄNG (b·∫Øt bu·ªôc)
            ‚Ä¢ S·ªê ƒêI·ªÜN THO·∫†I (b·∫Øt bu·ªôc)
            ‚Ä¢ NG∆Ø·ªúI LI√äN H·ªÜ (t√πy ch·ªçn)

            üí° Vui l√≤ng:
            ‚Ä¢ T·∫£i file m·∫´u ƒë·ªÉ xem ƒë·ªãnh d·∫°ng chu·∫©n
            ‚Ä¢ ƒê·∫£m b·∫£o d√≤ng ƒë·∫ßu ti√™n l√† ti√™u ƒë·ªÅ c·ªôt
            ‚Ä¢ S·ª≠ d·ª•ng ch√≠nh x√°c t√™n c·ªôt nh∆∞ tr√™n`,
          });
          event.target.value = "";
          return;
        }

        // Read data with progress tracking
        let validCustomers = 0;
        let invalidRows: string[] = [];
        let processedRows = 0;
        const totalDataRows = worksheet.rowCount - 1; // Excluding header

        worksheet.eachRow((row, rowNumber) => {
          if (rowNumber === 1) return; // Skip header row

          processedRows++;
          const fullName =
            row.getCell(fullNameCol).value?.toString().trim() || "";
          const phoneNumber =
            row.getCell(phoneNumberCol).value?.toString().trim() || "";
          const salutation = salutationCol
            ? row.getCell(salutationCol).value?.toString().trim() || ""
            : "";

          // ‚úÖ VALIDATION D·ªÆ LI·ªÜU CHI TI·∫æT H∆†N
          const validationErrors = [];
          if (!fullName) validationErrors.push("T√™n");
          if (!phoneNumber) validationErrors.push("SƒêT");

          // Validate phone number format (basic)
          if (
            phoneNumber &&
            !/^[0-9+\-\s()]{8,15}$/.test(phoneNumber.replace(/\s/g, ""))
          ) {
            validationErrors.push("SƒêT kh√¥ng h·ª£p l·ªá");
          }

          if (validationErrors.length === 0) {
            customers.push({
              phone_number: phoneNumber,
              full_name: fullName,
              salutation,
            });
            validCustomers++;
          } else {
            invalidRows.push(
              `D√≤ng ${rowNumber}: ${validationErrors.join(", ")}`
            );
          }
        });

        if (customers.length === 0) {
          setAlertSafe({
            type: "error",
            message: `‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá!

            üìä T·ªïng s·ªë d√≤ng x·ª≠ l√Ω: ${processedRows}
            üìä D√≤ng h·ª£p l·ªá: 0
            üìä D√≤ng l·ªói: ${invalidRows.length}

            üîç Chi ti·∫øt l·ªói:
            ${invalidRows.slice(0, 5).join("\n")}
            ${
              invalidRows.length > 5
                ? `\n... v√† ${invalidRows.length - 5} d√≤ng kh√°c`
                : ""
            }

            üí° Vui l√≤ng:
            ‚Ä¢ Ki·ªÉm tra d·ªØ li·ªáu trong file
            ‚Ä¢ ƒê·∫£m b·∫£o c√≥ ƒë·ªß th√¥ng tin T√™n v√† SƒêT
            ‚Ä¢ Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i`,
          });
          event.target.value = "";
          return;
        }

        setUploadedCustomers(customers);

        // ‚úÖ DELAY ƒê·ªÇ ƒê·∫¢M B·∫¢O CUSTOMERS ƒê√É ƒê∆Ø·ª¢C SET
        await new Promise((resolve) => setTimeout(resolve, 100));

        if (invalidRows.length > 0) {
          setAlertSafe({
            type: "warning",
            message: `‚ö†Ô∏è Import th√†nh c√¥ng v·ªõi c·∫£nh b√°o!

            ‚úÖ Import th√†nh c√¥ng: ${validCustomers} kh√°ch h√†ng
            ‚ö†Ô∏è B·ªè qua: ${invalidRows.length} d√≤ng l·ªói
            üìä T·ª∑ l·ªá th√†nh c√¥ng: ${Math.round(
              (validCustomers / (validCustomers + invalidRows.length)) * 100
            )}%

            üîç Chi ti·∫øt d√≤ng l·ªói:
            ${invalidRows.slice(0, 3).join("\n")}
            ${
              invalidRows.length > 3
                ? `\n... v√† ${invalidRows.length - 3} d√≤ng kh√°c`
                : ""
            }

            üí° B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c ho·∫∑c s·ª≠a l·ªói v√† import l·∫°i.`,
          });
        } else {
          setAlertSafe({
            type: "success",
            message: `üéâ Import Excel th√†nh c√¥ng!

            ‚úÖ ƒê√£ import: ${validCustomers} kh√°ch h√†ng
            üìä T·ª∑ l·ªá th√†nh c√¥ng: 100%
            üìã File: ${file.name}

            üöÄ S·∫µn s√†ng ƒë·ªÉ t·∫°o chi·∫øn d·ªãch!`,
          });
        }
      } catch (error) {
        console.error("üí• [FILE UPLOAD] Excel processing failed:", error);
        await new Promise((resolve) => setTimeout(resolve, 200));

        try {
          const csvSuccess = await handleCSVFallback(file, error);

          // ‚úÖ CH·ªà RESET INPUT KHI CSV FALLBACK TH·∫§T B·∫†I
          if (!csvSuccess) {
            event.target.value = "";
          }
        } catch (fallbackError) {
          console.error("üí• [CSV FALLBACK] Also failed:", fallbackError);
          // Reset states khi c·∫£ Excel v√† CSV ƒë·ªÅu fail
          setCustomerFile(null);
          setUploadedCustomers([]);
          event.target.value = "";
          setAlertSafe({
            type: "error",
            message: `‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω file!

            üìã Excel: ${
              error instanceof Error ? error.message : "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
            }
            üìã CSV: ${
              fallbackError instanceof Error
                ? fallbackError.message
                : "Kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c"
            }

            üí° Vui l√≤ng:
            ‚Ä¢ Ki·ªÉm tra file c√≥ b·ªã h·ªèng kh√¥ng
            ‚Ä¢ Th·ª≠ t·∫£i file m·∫´u v√† l√†m l·∫°i
            ‚Ä¢ Li√™n h·ªá h·ªó tr·ª£ n·∫øu v·∫´n l·ªói`,
          });
        }
      }
    },
    [handleCSVFallback, setAlertSafe]
  );

  const getBasicInfoErrors = useCallback((): string[] => {
    const errors: string[] = [];
    if (!campaignName?.trim())
      errors.push("üìù T√™n ch∆∞∆°ng tr√¨nh ch∆∞a ƒë∆∞·ª£c nh·∫≠p");
    if (!selectedType) errors.push("üéØ Lo·∫°i ch∆∞∆°ng tr√¨nh ch∆∞a ƒë∆∞·ª£c ch·ªçn");
    return errors;
  }, [campaignName, selectedType]);

  const downloadSampleFile = useCallback(() => {
    // ƒê∆∞·ªùng d·∫´n file m·∫´u trong th∆∞ m·ª•c public
    const fileUrl = "/file_mau_cau_hinh_gui_tin_nhan.xlsx";
    const a = document.createElement("a");
    a.href = fileUrl;
    a.download = "file_mau_cau_hinh_gui_tin_nhan.xlsx";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  }, []);

  const getValidationErrorsForTab2 = useCallback((): string[] => {
    const errors: string[] = [];

    // Ki·ªÉm tra message content
    if (!messageContent?.trim()) {
      errors.push("üìù N·ªôi dung tin nh·∫Øn ch∆∞a ƒë∆∞·ª£c nh·∫≠p");
    } else if (messageValidationError) {
      errors.push(`üìù N·ªôi dung tin nh·∫Øn: ${messageValidationError}`);
    }

    // ‚úÖ Ki·ªÉm tra attachment (b·∫Øt bu·ªôc)
    if (!attachmentType) {
      errors.push(
        "üìé Ch∆∞a ch·ªçn lo·∫°i ƒë√≠nh k√®m (H√¨nh ·∫£nh, Li√™n k·∫øt ho·∫∑c T·ªáp tin)"
      );
    } else if (!attachmentData?.trim()) {
      const typeNames = {
        image: "h√¨nh ·∫£nh",
        link: "li√™n k·∫øt",
        file: "t·ªáp tin",
      };
      errors.push(`üìé Ch∆∞a t·∫£i l√™n ${typeNames[attachmentType]}`);
    } else if (attachmentValidationError) {
      errors.push(`üìé ƒê√≠nh k√®m: ${attachmentValidationError}`);
    }

    // Ki·ªÉm tra schedule d·ª±a tr√™n lo·∫°i campaign
    if (
      selectedType === CampaignType.HOURLY_KM ||
      selectedType === CampaignType.DAILY_KM
    ) {
      if (!startTime) errors.push("üïê Gi·ªù b·∫Øt ƒë·∫ßu g·ª≠i ch∆∞a ƒë∆∞·ª£c ch·ªçn");
      if (!endTime) errors.push("üïê Gi·ªù k·∫øt th√∫c g·ª≠i ch∆∞a ƒë∆∞·ª£c ch·ªçn");
    } else if (selectedType === CampaignType.THREE_DAY_KM) {
      if (
        Array.isArray(selectedDays) ? selectedDays.length === 0 : !selectedDays
      ) {
        errors.push("üìÖ Ch∆∞a ch·ªçn 3 ng√†y li·ªÅn k·ªÅ ƒë·ªÉ g·ª≠i");
      }
      if (!timeOfDay) errors.push("üïê Th·ªùi gian g·ª≠i trong ng√†y ch∆∞a ƒë∆∞·ª£c ch·ªçn");
    } else if (
      selectedType === CampaignType.WEEKLY_SP ||
      selectedType === CampaignType.WEEKLY_BBG
    ) {
      if (!selectedDays) errors.push("üìÖ Ch∆∞a ch·ªçn ng√†y trong tu·∫ßn ƒë·ªÉ g·ª≠i");
      if (!timeOfDay) errors.push("üïê Th·ªùi gian g·ª≠i trong ng√†y ch∆∞a ƒë∆∞·ª£c ch·ªçn");
    }

    return errors;
  }, [
    messageContent,
    messageValidationError,
    attachmentType,
    attachmentData,
    attachmentValidationError,
    selectedType,
    startTime,
    endTime,
    selectedDays,
    timeOfDay,
  ]);

  // Handle tab change with animation - memoized
  const handleTabChange = useCallback(
    (tab: string) => {
      const targetStepNumber =
        ["basic", "schedule", "reminders", "email", "customers"]
          .filter((t) => needsReminderTab || t !== "reminders")
          .indexOf(tab) + 1;
      // In edit mode, allow navigation to any tab
      if (mode === "edit") {
        setCurrentTab(tab);
        return;
      }

      // Create mode validation
      if (tab === "schedule" && visitedSteps.has(1) && !canProceedFromTab1) {
        const errors = getBasicInfoErrors();
        setAlertSafe({
          type: "warning",
          message: `‚ö†Ô∏è Vui l√≤ng ho√†n th√†nh th√¥ng tin c∆° b·∫£n!\n\n${errors.join(
            "\n"
          )}\n\nüí° Ho√†n th√†nh ƒë·ªÉ ti·∫øp t·ª•c.`,
        });
        return;
      }

      if (tab === "reminders" && visitedSteps.has(2) && !canProceedFromTab2) {
        const tabErrors = getValidationErrorsForTab2();
        setAlertSafe({
          type: "warning",
          message: `‚ö†Ô∏è Vui l√≤ng ho√†n th√†nh l·ªãch tr√¨nh & n·ªôi dung!\n\n${tabErrors.join(
            "\n"
          )}\n\nüí° Ho√†n th√†nh t·∫•t c·∫£ th√¥ng tin tr√™n ƒë·ªÉ ti·∫øp t·ª•c.`,
        });
        return;
      }

      if (
        tab === "email" &&
        (!canProceedFromTab2 || (needsReminderTab && !canProceedFromTab3))
      ) {
        let errorMessage = "";
        if (!canProceedFromTab2) {
          const tabErrors = getValidationErrorsForTab2();
          errorMessage = `‚ö†Ô∏è L·ªãch tr√¨nh & n·ªôi dung ch∆∞a ƒë·∫ßy ƒë·ªß:\n\n${tabErrors.join(
            "\n"
          )}`;
        } else if (needsReminderTab && !canProceedFromTab3) {
          const reminderErrors = reminderValidationErrors
            .map((error, index) =>
              error ? `üì¢ L·∫ßn nh·∫Øc ${index + 1}: ${error}` : null
            )
            .filter(Boolean);

          const missingReminders = reminders
            .map((r, index) => {
              const errors: string[] = [];
              if (!r.content?.trim()) errors.push(`N·ªôi dung tr·ªëng`);
              if (r.minutes <= 0) errors.push(`Th·ªùi gian kh√¥ng h·ª£p l·ªá`);
              return errors.length > 0
                ? `üì¢ L·∫ßn nh·∫Øc ${index + 1}: ${errors.join(", ")}`
                : null;
            })
            .filter(Boolean);

          const allErrors = [...reminderErrors, ...missingReminders];
          errorMessage = `‚ö†Ô∏è C·∫•u h√¨nh nh·∫Øc l·∫°i ch∆∞a ƒë·∫ßy ƒë·ªß:\n\n${allErrors.join(
            "\n"
          )}`;
        }

        setAlertSafe({
          type: "warning",
          message: `${errorMessage}\n\nüí° Vui l√≤ng ho√†n th√†nh ƒë·ªÉ ti·∫øp t·ª•c.`,
        });
        return;
      }

      if (
        tab === "customers" &&
        (!canProceedFromTab2 || (needsReminderTab && !canProceedFromTab3))
      ) {
        // Similar logic as above for customers tab
        let errorMessage = "";
        if (!canProceedFromTab2) {
          const tabErrors = getValidationErrorsForTab2();
          errorMessage = `‚ö†Ô∏è L·ªãch tr√¨nh & n·ªôi dung ch∆∞a ƒë·∫ßy ƒë·ªß:\n\n${tabErrors.join(
            "\n"
          )}`;
        } else if (needsReminderTab && !canProceedFromTab3) {
          const reminderErrors = reminderValidationErrors
            .map((error, index) =>
              error ? `üì¢ L·∫ßn nh·∫Øc ${index + 1}: ${error}` : null
            )
            .filter(Boolean);

          const missingReminders = reminders
            .map((r, index) => {
              const errors: string[] = [];
              if (!r.content?.trim()) errors.push(`N·ªôi dung tr·ªëng`);
              if (r.minutes <= 0) errors.push(`Th·ªùi gian kh√¥ng h·ª£p l·ªá`);
              return errors.length > 0
                ? `üì¢ L·∫ßn nh·∫Øc ${index + 1}: ${errors.join(", ")}`
                : null;
            })
            .filter(Boolean);

          const allErrors = [...reminderErrors, ...missingReminders];
          errorMessage = `‚ö†Ô∏è C·∫•u h√¨nh nh·∫Øc l·∫°i ch∆∞a ƒë·∫ßy ƒë·ªß:\n\n${allErrors.join(
            "\n"
          )}`;
        }

        setAlertSafe({
          type: "warning",
          message: `${errorMessage}\n\nüí° Vui l√≤ng ho√†n th√†nh ƒë·ªÉ ti·∫øp t·ª•c.`,
        });
        return;
      }

      setCurrentTab(tab);
    },
    [
      mode,
      canProceedFromTab1,
      canProceedFromTab2,
      canProceedFromTab3,
      visitedSteps,
      needsReminderTab,
      campaignName,
      selectedType,
      getValidationErrorsForTab2,
      reminderValidationErrors,
      reminders,
      setAlertSafe,
    ]
  );

  // Th√™m handler ƒë·ªÉ t·ª± ƒë·ªông set Recipient TO khi t·∫°o m·ªõi
  const handleSystemEmailSelection = useCallback(
    (value: (string | number)[]) => {
      const selectedEmails = value.map(String);
      setRecipientsCc(selectedEmails);

      // Ch·ªâ auto-set recipientsTo khi t·∫°o m·ªõi v√† ch∆∞a c√≥ recipientsTo
      if (
        mode === "create" &&
        !recipientsTo.trim() &&
        selectedEmails.length > 0
      ) {
        setRecipientsTo(selectedEmails[0]);
        // Remove email ƒë·∫ßu ti√™n kh·ªèi CC v√¨ ƒë√£ th√†nh TO
        setRecipientsCc(selectedEmails.slice(1));
      }
    },
    [mode, recipientsTo]
  );

  const handleSubmit = async () => {
    // ‚úÖ Enhanced Email Validation Logic
    const hasSystemEmails = recipientsCc.length > 0;
    const hasCustomEmails = customEmails.some((e) => e.trim());
    const hasRecipientTo = recipientsTo.trim();
    const hasAnyEmails = hasRecipientTo || hasSystemEmails || hasCustomEmails;

    // ‚úÖ Basic validation that always applies
    if (!campaignName?.trim() || !selectedType) {
      setAlertSafe?.({
        type: "error",
        message:
          "‚ö†Ô∏è Th√¥ng tin c∆° b·∫£n ch∆∞a ƒë·∫ßy ƒë·ªß!\n\nVui l√≤ng nh·∫≠p t√™n chi·∫øn d·ªãch v√† ch·ªçn lo·∫°i chi·∫øn d·ªãch.",
      });
      return;
    }

    // ‚úÖ Validate attachment (b·∫Øt bu·ªôc)
    if (!attachmentType) {
      setAlertSafe?.({
        type: "error",
        message:
          "üìé Ch∆∞a ch·ªçn lo·∫°i ƒë√≠nh k√®m!\n\nVui l√≤ng ch·ªçn m·ªôt trong ba lo·∫°i: H√¨nh ·∫£nh, Li√™n k·∫øt ho·∫∑c T·ªáp tin.",
      });
      return;
    }

    if (!attachmentData?.trim()) {
      const typeNames = {
        image: "h√¨nh ·∫£nh",
        link: "li√™n k·∫øt",
        file: "t·ªáp tin",
      };
      setAlertSafe?.({
        type: "error",
        message: `üìé Ch∆∞a t·∫£i l√™n ${typeNames[attachmentType]}!\n\nVui l√≤ng t·∫£i l√™n n·ªôi dung ƒë√≠nh k√®m ho·∫∑c b·ªè ch·ªçn lo·∫°i ƒë√≠nh k√®m.`,
      });
      return;
    }

    if (attachmentValidationError) {
      setAlertSafe?.({
        type: "error",
        message: `üìé L·ªói ƒë√≠nh k√®m!\n\n${attachmentValidationError}\n\nVui l√≤ng s·ª≠a l·ªói tr∆∞·ªõc khi ti·∫øp t·ª•c.`,
      });
      return;
    }

    // ‚úÖ Enhanced Email Validation - Ch·∫∑n submit khi c√≥ email nh∆∞ng thi·∫øu Recipients TO
    if (emailReportsEnabled && hasAnyEmails && !hasRecipientTo) {
      console.warn(
        "‚ùå Submit blocked: Email reports enabled but missing Recipients TO"
      );

      // Focus v√† scroll ƒë·∫øn Recipients TO input
      const recipientsToInput = document.querySelector(
        'input[placeholder="example@email.com"]'
      ) as HTMLInputElement;

      if (recipientsToInput) {
        recipientsToInput.focus();
        recipientsToInput.scrollIntoView({
          behavior: "smooth",
          block: "center",
        });
      }

      // Enhanced error message v·ªõi h∆∞·ªõng d·∫´n c·ª• th·ªÉ
      const suggestionEmails = [
        ...recipientsCc,
        ...customEmails.filter((e) => e.trim()),
      ];

      setAlertSafe?.({
        type: "warning",
        message: `‚ö†Ô∏è C·∫ßn ch·ªçn ng∆∞·ªùi nh·∫≠n ch√≠nh!\n\nB·∫°n ƒë√£ c·∫•u h√¨nh ${
          hasSystemEmails ? "email h·ªá th·ªëng" : ""
        }${hasSystemEmails && hasCustomEmails ? " v√† " : ""}${
          hasCustomEmails ? "email t√πy ch·ªânh" : ""
        } nh∆∞ng ch∆∞a c√≥ ng∆∞·ªùi nh·∫≠n ch√≠nh.\n\nüí° G·ª£i √Ω: ${
          suggestionEmails.length > 0
            ? `Ch·ªçn m·ªôt trong c√°c email: ${suggestionEmails
                .slice(0, 2)
                .join(", ")}${suggestionEmails.length > 2 ? "..." : ""}`
            : "Nh·∫≠p email ng∆∞·ªùi nh·∫≠n ch√≠nh ho·∫∑c ch·ªçn t·ª´ danh s√°ch g·ª£i √Ω b√™n d∆∞·ªõi"
        }`,
      });

      return;
    }

    // ‚úÖ Mode-specific validation
    if (mode === "create") {
      if (
        !canProceedFromTab1 ||
        !canProceedFromTab2 ||
        (needsReminderTab && !canProceedFromTab3)
      ) {
        console.warn("Validation failed for create mode");
        setAlertSafe?.({
          type: "error",
          message:
            "‚ùå Validation failed!\n\nVui l√≤ng ho√†n th√†nh t·∫•t c·∫£ c√°c tab b·∫Øt bu·ªôc tr∆∞·ªõc khi t·∫°o chi·∫øn d·ªãch.",
        });
        return;
      }
    }

    // ‚úÖ Email validation cho ch·∫ø ƒë·ªô enabled
    if (emailReportsEnabled) {
      // Validate Recipients TO format khi c√≥
      if (hasRecipientTo) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(recipientsTo.trim())) {
          setAlertSafe?.({
            type: "error",
            message:
              "‚ö†Ô∏è Email ng∆∞·ªùi nh·∫≠n ch√≠nh kh√¥ng h·ª£p l·ªá!\n\nVui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng email (example@domain.com)",
          });
          return;
        }
      }

      // Validate Custom emails format
      const invalidCustomEmails = customEmails
        .filter((e) => e.trim())
        .filter((e) => !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e.trim()));

      if (invalidCustomEmails.length > 0) {
        setAlertSafe?.({
          type: "error",
          message: `‚ö†Ô∏è Email t√πy ch·ªânh kh√¥ng h·ª£p l·ªá!\n\nC√°c email sau kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng: ${invalidCustomEmails.join(
            ", "
          )}`,
        });
        return;
      }

      // Validate report interval cho interval mode
      if (emailSendMode === "interval" && reportInterval) {
        const intervalNum = parseInt(reportInterval, 10);
        if (isNaN(intervalNum) || intervalNum < 1 || intervalNum > 1440) {
          setAlertSafe?.({
            type: "error",
            message:
              "‚ö†Ô∏è Kho·∫£ng th·ªùi gian g·ª≠i email kh√¥ng h·ª£p l·ªá!\n\nVui l√≤ng nh·∫≠p s·ªë t·ª´ 1 ƒë·∫øn 1440 ph√∫t.",
          });
          return;
        }
      }
    }

    setIsSubmitting(true);

    try {
      // ‚úÖ Build campaign data
      const campaignData: CampaignFormData = {
        ...(mode === "edit" && initialData ? { id: initialData.id } : {}),
        name: campaignName,
        campaign_type: selectedType as CampaignType,
        messages: {
          type: "initial",
          text: messageContent || "", // Allow empty message in edit mode
          attachment:
            attachmentType && attachmentData
              ? {
                  type: attachmentType,
                  ...(attachmentType === "image" || attachmentType === "file"
                    ? {
                        base64: attachmentData,
                        ...(attachmentType === "file" &&
                        attachmentMetadata?.filename
                          ? { filename: attachmentMetadata.filename }
                          : {}),
                      }
                    : { url: attachmentData }),
                }
              : null,
        } as any,
      };

      // ‚úÖ Schedule config v·ªõi validation linh ho·∫°t h∆°n cho edit mode
      if (
        selectedType === CampaignType.HOURLY_KM ||
        selectedType === CampaignType.DAILY_KM
      ) {
        campaignData.schedule_config = {
          type: "hourly",
          start_time: startTime || undefined,
          end_time: endTime || undefined,
          remind_after_minutes: reminders.length > 0 ? reminders[0].minutes : 0,
        };
      } else if (selectedType === CampaignType.THREE_DAY_KM) {
        campaignData.schedule_config = {
          type: "3_day",
          days_of_week:
            Array.isArray(selectedDays) && selectedDays.length > 0
              ? selectedDays
              : Array.isArray(selectedDays)
              ? []
              : [selectedDays as number].filter((d) => d !== 0),
          time_of_day: timeOfDay || undefined,
        };
      } else if (
        selectedType === CampaignType.WEEKLY_SP ||
        selectedType === CampaignType.WEEKLY_BBG
      ) {
        campaignData.schedule_config = {
          type: "weekly",
          day_of_week: Array.isArray(selectedDays)
            ? selectedDays[0] || 0
            : (selectedDays as number) || 0,
          time_of_day: timeOfDay || undefined,
        };
      }

      // ‚úÖ Reminders processing
      if (needsReminderTab) {
        campaignData.reminders = reminders.filter(
          (r) => r.content?.trim() && r.minutes > 0
        );
      }

      // ‚úÖ Enhanced Email Reports Configuration
      if (emailReportsEnabled && hasAnyEmails && hasRecipientTo) {
        // Clean v√† validate recipients_to
        const cleanRecipientsTo = recipientsTo.trim();

        // Clean v√† dedupe CC emails
        const systemCcEmails = recipientsCc.filter((email) => email.trim());
        const customCcEmails = customEmails.filter((email) => email.trim());
        const allCcEmails = [...systemCcEmails, ...customCcEmails];

        // Remove duplicates and Recipients TO from CC list
        const uniqueCcEmails = [...new Set(allCcEmails)].filter(
          (email) => email.toLowerCase() !== cleanRecipientsTo.toLowerCase()
        );

        campaignData.email_reports = {
          recipients_to: cleanRecipientsTo,
          recipients_cc: uniqueCcEmails,
          report_interval_minutes:
            emailSendMode === "interval" && reportInterval
              ? parseInt(reportInterval, 10)
              : undefined,
          stop_sending_at_time:
            emailSendMode === "interval"
              ? stopSendingTime || undefined
              : undefined,
          is_active: true,
          send_when_campaign_completed: emailSendMode === "completion",
        };

        console.log("üìß Email configuration:", {
          recipients_to: cleanRecipientsTo,
          recipients_cc: uniqueCcEmails,
          mode: emailSendMode,
          interval: reportInterval,
          stop_time: stopSendingTime,
        });
      }

      // ‚úÖ Customers data
      if (uploadedCustomers.length > 0) {
        campaignData.customers = uploadedCustomers;
      }

      console.log("üöÄ Submitting campaign data:", campaignData);

      // ‚úÖ Submit campaign
      await onSubmit(campaignData);

      // ‚úÖ Success handling
      setShowSuccess(true);
      setAlertSafe?.({
        type: "success",
        message: `‚úÖ ${
          mode === "edit" ? "C·∫≠p nh·∫≠t" : "T·∫°o"
        } chi·∫øn d·ªãch th√†nh c√¥ng!\n\nChi·∫øn d·ªãch "${campaignName}" ƒë√£ ƒë∆∞·ª£c ${
          mode === "edit" ? "c·∫≠p nh·∫≠t" : "t·∫°o"
        }.`,
      });

      setTimeout(() => {
        resetForm();
        onOpenChange(false);
        setShowSuccess(false);
      }, 1500);
    } catch (error) {
      console.error(
        `‚ùå Error ${mode === "edit" ? "updating" : "creating"} campaign:`,
        error
      );

      // Enhanced error handling
      const errorMessage =
        error instanceof Error ? error.message : "C√≥ l·ªói x·∫£y ra";
      setAlertSafe?.({
        type: "error",
        message: `‚ùå L·ªói ${
          mode === "edit" ? "c·∫≠p nh·∫≠t" : "t·∫°o"
        } chi·∫øn d·ªãch!\n\n${errorMessage}\n\nVui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá admin n·∫øu l·ªói ti·∫øp t·ª•c x·∫£y ra.`,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const roundedProgress = useMemo(() => Math.round(progress), [progress]);

  const modalTitle = useMemo(
    () => (mode === "edit" ? "Ch·ªânh S·ª≠a Chi·∫øn D·ªãch" : "T·∫°o Chi·∫øn D·ªãch M·ªõi"),
    [mode]
  );

  const submitButtonText = useMemo(
    () => (mode === "edit" ? "C·∫≠p nh·∫≠t" : "T·∫°o chi·∫øn d·ªãch"),
    [mode]
  );

  const successMessage = useMemo(
    () => (mode === "edit" ? "C·∫≠p nh·∫≠t th√†nh c√¥ng!" : "T·∫°o th√†nh c√¥ng!"),
    [mode]
  );

  const successDescription = useMemo(
    () =>
      mode === "edit"
        ? "Chi·∫øn d·ªãch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t"
        : "Chi·∫øn d·ªãch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o",
    [mode]
  );

  return (
    <>
      {/* Alert Portal - Outside Dialog to prevent conflicts */}
      <AnimatePresence>
        {alert && open && (
          <motion.div
            key={`alert-${alert.id}`}
            className="fixed top-4 left-4 right-4 z-[10001] pointer-events-none"
            initial={{ opacity: 0, y: -50, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -50, scale: 0.9 }}
            transition={{
              type: "spring",
              stiffness: 300,
              damping: 30,
            }}
          >
            <div className="relative pointer-events-auto max-w-md mx-auto">
              {alert?.type === "error" || alert?.type === "warning" ? (
                // Persistent alert for errors and warnings
                <div
                  className={`
                  p-4 rounded-lg border-l-4 shadow-lg
                  ${
                    alert.type === "error"
                      ? "bg-red-50 border-red-500 text-red-800"
                      : "bg-yellow-50 border-yellow-500 text-yellow-800"
                  }
                `}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex items-start space-x-3">
                      <div className="flex-shrink-0">
                        {alert.type === "error" ? (
                          <AlertCircle className="h-5 w-5 text-red-500" />
                        ) : (
                          <AlertCircle className="h-5 w-5 text-yellow-500" />
                        )}
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="text-sm font-medium mb-1">
                          {alert.type === "error" ? "L·ªói" : "C·∫£nh b√°o"}
                        </div>
                        <div className="text-sm whitespace-pre-line">
                          {alert.message}
                        </div>
                      </div>
                    </div>
                    <button
                      onClick={handleManualCloseAlert}
                      className="flex-shrink-0 ml-4 p-1 rounded-md hover:bg-red-100 transition-colors"
                      aria-label="ƒê√≥ng th√¥ng b√°o"
                      title="ƒê√≥ng th√¥ng b√°o"
                    >
                      <X className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              ) : (
                // ‚úÖ STANDARD ALERT CHO SUCCESS/INFO - C√≥ auto-close
                <ServerResponseAlert
                  type={alert.type as any}
                  message={alert.message}
                  onClose={handleCloseAlert}
                  duration={alert.type === "success" ? 4000 : 3000}
                />
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      <AnimatePresence mode="wait">
        {open && (
          <Dialog
            key={`campaign-modal-${mode}-${initialData?.id || "new"}`}
            open={open}
            onOpenChange={onOpenChange}
            modal={true}
          >
            <DialogContent className="!max-w-[85vw] !max-h-[85vh] p-0 bg-white flex flex-col">
              {/* Animated background */}
              <motion.div
                className="absolute top-0 right-0 w-32 h-32 bg-blue-50 rounded-full blur-2xl opacity-50 pointer-events-none"
                animate={{
                  scale: [1, 1.2, 1],
                  opacity: [0.3, 0.5, 0.3],
                }}
                transition={{
                  duration: 4,
                  repeat: Infinity,
                  ease: "easeInOut",
                }}
              />

              {/* FIXED HEADER - Update v·ªõi dynamic title */}
              <motion.div
                className="flex-shrink-0 bg-gradient-to-r from-blue-600 to-purple-600 p-4 text-white relative z-10"
                initial={{ y: -20, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ delay: 0.1 }}
              >
                <DialogHeader>
                  <DialogTitle className="flex items-center gap-3 text-lg font-semibold">
                    <motion.div
                      className="p-2 bg-white/20 rounded-lg"
                      whileHover={{ scale: 1.05, rotate: 5 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <Target className="h-5 w-5" />
                    </motion.div>
                    {modalTitle}
                  </DialogTitle>
                </DialogHeader>

                {/* Progress bar */}
                <motion.div
                  className="mt-3"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.2 }}
                >
                  <div className="flex justify-between items-center mb-1">
                    <span className="text-xs text-white/80">Ti·∫øn ƒë·ªô</span>
                    <motion.span
                      className="text-sm font-medium"
                      key={roundedProgress}
                      initial={{ scale: 1.2 }}
                      animate={{ scale: 1 }}
                    >
                      {roundedProgress}%
                    </motion.span>
                  </div>
                  <div className="h-1.5 bg-white/20 rounded-full overflow-hidden">
                    <motion.div
                      className="h-full bg-white/90 rounded-full"
                      initial={{ width: 0 }}
                      animate={{ width: `${progress}%` }}
                      transition={{ duration: 0.5, ease: "easeOut" }}
                    />
                  </div>
                </motion.div>
              </motion.div>

              {/* FIXED STEP INDICATOR */}
              <motion.div
                className="flex-shrink-0 px-6 py-3 bg-gray-50 border-b relative z-10"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.3 }}
              >
                <StepIndicator
                  currentStep={currentStepNumber}
                  totalSteps={totalSteps}
                  labels={tabLabels}
                  visitedSteps={visitedSteps}
                  showFutureErrors={false}
                  errors={getStepErrors}
                />
              </motion.div>

              {/* SCROLLABLE CONTENT AREA */}
              <div className="flex-1 overflow-y-auto min-h-0">
                <Tabs
                  value={currentTab}
                  onValueChange={handleTabChange}
                  className="h-full"
                >
                  <div className="p-6 space-y-6">
                    {/* Tab 1: Basic Information */}
                    <TabsContent value="basic" className="mt-0">
                      <motion.div
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: -20 }}
                        transition={{ duration: 0.3 }}
                      >
                        <Card className="border border-gray-200 shadow-sm">
                          <CardHeader className="pb-4">
                            <CardTitle className="text-lg font-semibold flex items-center gap-2">
                              <motion.div
                                animate={{ rotate: [0, 360] }}
                                transition={{
                                  duration: 20,
                                  repeat: Infinity,
                                  ease: "linear",
                                }}
                              >
                                <Target className="h-5 w-5 text-blue-600" />
                              </motion.div>
                              Th√¥ng tin c∆° b·∫£n
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-6">
                            {/* Campaign name */}
                            <motion.div
                              className="space-y-2"
                              initial={{ opacity: 0, y: 10 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: 0.1 }}
                            >
                              <Label className="text-sm font-medium">
                                T√™n ch∆∞∆°ng tr√¨nh{" "}
                                <span className="text-red-500">*</span>
                              </Label>
                              <Input
                                value={campaignName}
                                onChange={(e) =>
                                  setCampaignName(e.target.value)
                                }
                                placeholder="VD: Khuy·∫øn m√£i m√πa h√® 2024..."
                                className="h-10 transition-all duration-200 focus:ring-2 focus:ring-blue-500"
                              />
                            </motion.div>

                            {/* Campaign type */}
                            <motion.div
                              className="space-y-3"
                              initial={{ opacity: 0, y: 10 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: 0.2 }}
                            >
                              <Label className="text-sm font-medium">
                                Lo·∫°i ch∆∞∆°ng tr√¨nh{" "}
                                <span className="text-red-500">*</span>
                              </Label>
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                {campaignTypeOptions.map((option, index) => {
                                  const isSelected =
                                    selectedType === option.value;
                                  return (
                                    <motion.button
                                      key={option.value}
                                      initial={{ opacity: 0, scale: 0.9 }}
                                      animate={{ opacity: 1, scale: 1 }}
                                      transition={{ delay: 0.3 + index * 0.1 }}
                                      whileHover={{
                                        scale: 1.02,
                                        y: -2,
                                        transition: { duration: 0.1 },
                                      }}
                                      whileTap={{ scale: 0.98 }}
                                      type="button"
                                      onClick={() =>
                                        setSelectedType(
                                          isSelected ? "" : option.value
                                        )
                                      }
                                      className={cn(
                                        "p-4 rounded-lg border-2 transition-all duration-200 text-left",
                                        isSelected
                                          ? "border-blue-500 bg-blue-50 shadow-lg"
                                          : "border-gray-200 hover:border-gray-300 hover:shadow-md"
                                      )}
                                    >
                                      <div className="flex items-center gap-3">
                                        <motion.span
                                          className="text-2xl"
                                          animate={
                                            isSelected
                                              ? {
                                                  rotate: [0, 10, -10, 0],
                                                  scale: [1, 1.1, 1],
                                                }
                                              : {}
                                          }
                                          transition={{ duration: 0.5 }}
                                        >
                                          {option.emoji}
                                        </motion.span>
                                        <div className="flex-1">
                                          <h3 className="font-medium text-sm mb-1">
                                            {option.label}
                                          </h3>
                                          <p className="text-xs text-gray-600">
                                            {option.description}
                                          </p>
                                        </div>
                                        <AnimatePresence>
                                          {isSelected && (
                                            <motion.div
                                              initial={{
                                                scale: 0,
                                                rotate: -90,
                                              }}
                                              animate={{ scale: 1, rotate: 0 }}
                                              exit={{ scale: 0, rotate: 90 }}
                                            >
                                              <Check className="h-4 w-4 text-blue-600" />
                                            </motion.div>
                                          )}
                                        </AnimatePresence>
                                      </div>
                                    </motion.button>
                                  );
                                })}
                              </div>
                            </motion.div>
                          </CardContent>
                        </Card>
                      </motion.div>
                    </TabsContent>

                    {/* Tab 2: Schedule & Content */}
                    <TabsContent value="schedule" className="mt-0">
                      <motion.div
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: -20 }}
                        transition={{ duration: 0.3 }}
                      >
                        <Card className="border border-gray-200 shadow-sm">
                          <CardHeader className="pb-4">
                            <CardTitle className="text-lg font-semibold flex items-center gap-2">
                              <motion.div
                                animate={{ rotate: [0, 360] }}
                                transition={{
                                  duration: 2,
                                  repeat: Infinity,
                                  ease: "linear",
                                }}
                              >
                                <Clock className="h-5 w-5 text-purple-600" />
                              </motion.div>
                              L·ªãch tr√¨nh & N·ªôi dung
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-6">
                            {/* Time configuration */}
                            {(selectedType === CampaignType.HOURLY_KM ||
                              selectedType === CampaignType.DAILY_KM) && (
                              <motion.div
                                className="grid grid-cols-1 md:grid-cols-2 gap-4"
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: 0.1 }}
                              >
                                <ModernTimePicker
                                  value={startTime}
                                  onChange={setStartTime}
                                  label="Gi·ªù b·∫Øt ƒë·∫ßu g·ª≠i *"
                                  timeRange={{
                                    startTime: "08:00",
                                    endTime: "17:45",
                                  }}
                                />
                                <ModernTimePicker
                                  value={endTime}
                                  onChange={setEndTime}
                                  label="Gi·ªù k·∫øt th√∫c g·ª≠i *"
                                  timeRange={{
                                    startTime: "08:00",
                                    endTime: "17:45",
                                  }}
                                />
                              </motion.div>
                            )}

                            {/* 3-day campaign schedule */}
                            {selectedType === CampaignType.THREE_DAY_KM && (
                              <motion.div
                                className="space-y-4"
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: 0.1 }}
                              >
                                <ModernDaySelector
                                  value={selectedDays}
                                  onChange={handleDaySelectionChange}
                                  mode="adjacent"
                                  adjacentDayCount={3}
                                  includeSaturday={includeSaturday}
                                  label="Ch·ªçn 3 ng√†y li·ªÅn k·ªÅ *"
                                />
                                <ModernTimePicker
                                  value={timeOfDay}
                                  onChange={setTimeOfDay}
                                  label="Th·ªùi gian g·ª≠i trong ng√†y *"
                                  timeRange={{
                                    startTime: "08:00",
                                    endTime: "17:45",
                                  }}
                                />
                              </motion.div>
                            )}

                            {/* Weekly campaign schedule */}
                            {(selectedType === CampaignType.WEEKLY_SP ||
                              selectedType === CampaignType.WEEKLY_BBG) && (
                              <motion.div
                                className="space-y-4"
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: 0.1 }}
                              >
                                <ModernDaySelector
                                  value={selectedDays}
                                  onChange={handleDaySelectionChange}
                                  mode="single"
                                  onModeChange={handleDaySelectionModeChange}
                                  includeSaturday={includeSaturday}
                                  label="Ch·ªçn ng√†y trong tu·∫ßn *"
                                />
                                <ModernTimePicker
                                  value={timeOfDay}
                                  onChange={setTimeOfDay}
                                  label="Th·ªùi gian g·ª≠i trong ng√†y *"
                                  timeRange={{
                                    startTime: "08:00",
                                    endTime: "17:45",
                                  }}
                                />
                              </motion.div>
                            )}

                            {/* Message content */}
                            <motion.div
                              className="space-y-2"
                              initial={{ opacity: 0, y: 10 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: 0.2 }}
                            >
                              <Label className="text-sm font-medium flex items-center justify-between">
                                <span>
                                  N·ªôi dung tin nh·∫Øn{" "}
                                  <span className="text-red-500">*</span>
                                </span>
                                <TextCounter
                                  current={messageContent.length}
                                  max={500}
                                />
                              </Label>
                              <EnhancedTextarea
                                value={messageContent}
                                onChange={(e) =>
                                  setMessageContent(e.target.value)
                                }
                                enableValidation={true}
                                onValidationChange={
                                  handleMessageValidationChange
                                }
                                placeholder="Nh·∫≠p n·ªôi dung tin nh·∫Øn h·∫•p d·∫´n c·ªßa b·∫°n..."
                                rows={8}
                                className="resize-none transition-all duration-200"
                                maxLength={10000}
                                insertButtons={messageInsertButtons}
                                showInsertButtons={true}
                              />
                            </motion.div>

                            {/* Attachment */}
                            <motion.div
                              initial={{ opacity: 0, y: 10 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: 0.3 }}
                            >
                              <ModernAttachmentSelector
                                type={attachmentType}
                                onTypeChange={setAttachmentType}
                                data={attachmentData}
                                onDataChange={setAttachmentData}
                                required={true} // ‚úÖ B·∫Øt bu·ªôc ch·ªçn attachment
                                onValidationChange={
                                  setAttachmentValidationError
                                }
                                onAttachmentDataChange={(data) => {
                                  console.log(
                                    "Attachment data received:",
                                    data
                                  );
                                  if (data) {
                                    if (data.filename) {
                                      // File attachment
                                      setAttachmentMetadata({
                                        filename: data.filename,
                                        size: data.size,
                                        type: data.type,
                                      });
                                    } else if (data.url) {
                                      // URL attachment
                                      setAttachmentMetadata(null); // URL kh√¥ng c·∫ßn metadata
                                    }
                                  } else {
                                    setAttachmentMetadata(null);
                                  }
                                }}
                              />
                            </motion.div>
                          </CardContent>
                        </Card>
                      </motion.div>
                    </TabsContent>

                    {/* Tab 3: Reminders */}
                    {needsReminderTab && (
                      <TabsContent value="reminders" className="mt-0">
                        <motion.div
                          initial={{ opacity: 0, x: 20 }}
                          animate={{ opacity: 1, x: 0 }}
                          exit={{ opacity: 0, x: -20 }}
                          transition={{ duration: 0.3 }}
                        >
                          <Card className="border border-gray-200 shadow-sm">
                            <CardHeader className="pb-4">
                              <CardTitle className="text-lg font-semibold flex items-center gap-2">
                                <motion.div
                                  animate={{
                                    rotate: [0, 15, -15, 0],
                                    scale: [1, 1.1, 1],
                                  }}
                                  transition={{
                                    duration: 2,
                                    repeat: Infinity,
                                    ease: "easeInOut",
                                  }}
                                >
                                  <Bell className="h-5 w-5 text-orange-600" />
                                </motion.div>
                                C·∫•u h√¨nh nh·∫Øc l·∫°i
                              </CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-4">
                              <AnimatePresence>
                                {reminders.map((reminder, index) => (
                                  <motion.div
                                    key={index}
                                    initial={{ opacity: 0, y: 20, scale: 0.95 }}
                                    animate={{ opacity: 1, y: 0, scale: 1 }}
                                    exit={{ opacity: 0, y: -20, scale: 0.95 }}
                                    transition={{
                                      duration: 0.3,
                                      delay: index * 0.1,
                                    }}
                                    layout
                                    className="border border-gray-200 rounded-lg p-4 space-y-4"
                                  >
                                    <div className="flex items-center justify-between">
                                      <motion.h4
                                        className="font-medium text-sm"
                                        initial={{ opacity: 0 }}
                                        animate={{ opacity: 1 }}
                                        transition={{ delay: 0.1 }}
                                      >
                                        L·∫ßn nh·∫Øc th·ª© {index + 1}
                                      </motion.h4>
                                      {reminders.length > 1 && (
                                        <motion.div
                                          whileHover={{ scale: 1.1 }}
                                          whileTap={{ scale: 0.9 }}
                                        >
                                          <Button
                                            type="button"
                                            variant="ghost"
                                            size="sm"
                                            onClick={() =>
                                              removeReminder(index)
                                            }
                                            className="text-red-600 hover:text-red-700"
                                          >
                                            <motion.div
                                              whileHover={{ rotate: 90 }}
                                              transition={{ duration: 0.2 }}
                                            >
                                              <X className="h-4 w-4" />
                                            </motion.div>
                                          </Button>
                                        </motion.div>
                                      )}
                                    </div>

                                    <div className="space-y-3">
                                      <motion.div
                                        initial={{ opacity: 0, x: -10 }}
                                        animate={{ opacity: 1, x: 0 }}
                                        transition={{ delay: 0.2 }}
                                      >
                                        <Label className="text-sm">
                                          N·ªôi dung nh·∫Øc l·∫°i
                                        </Label>
                                        <motion.div
                                          whileFocus={{ scale: 1.01 }}
                                          transition={{ duration: 0.1 }}
                                        >
                                          <EnhancedTextarea
                                            value={reminder.content}
                                            onChange={(e) =>
                                              updateReminder(
                                                index,
                                                "content",
                                                e.target.value
                                              )
                                            }
                                            enableValidation={true}
                                            onValidationChange={(error) =>
                                              handleReminderValidationChange(
                                                index,
                                                error
                                              )
                                            }
                                            insertButtons={
                                              reminderInsertButtons
                                            }
                                            placeholder="VD: ∆Øu ƒë√£i s·∫Øp h·∫øt h·∫°n! Nhanh tay nh·∫≠n ngay..."
                                            rows={2}
                                            className="resize-none mt-1 transition-all duration-200"
                                            maxLength={10000}
                                          />
                                        </motion.div>
                                      </motion.div>

                                      <motion.div
                                        initial={{ opacity: 0, x: -10 }}
                                        animate={{ opacity: 1, x: 0 }}
                                        transition={{ delay: 0.3 }}
                                      >
                                        <Label className="text-sm">
                                          Th·ªùi gian ch·ªù:
                                          <motion.span
                                            className="font-semibold text-orange-600 ml-1"
                                            key={reminder.minutes}
                                            initial={{
                                              scale: 1.2,
                                              color: "#ea580c",
                                            }}
                                            animate={{
                                              scale: 1,
                                              color: "#ea580c",
                                            }}
                                            transition={{ duration: 0.2 }}
                                          >
                                            {reminder.minutes} ph√∫t
                                          </motion.span>
                                        </Label>
                                        <motion.div
                                          className="mt-2"
                                          whileHover={{ scale: 1.01 }}
                                          transition={{ duration: 0.1 }}
                                        >
                                          <Slider
                                            value={[reminder.minutes]}
                                            onValueChange={(value) => {
                                              let newValue = value[0];
                                              if (newValue < 20) {
                                                newValue = Math.round(newValue);
                                              } else {
                                                newValue =
                                                  Math.round(newValue / 5) * 5;
                                              }
                                              newValue = Math.max(
                                                5,
                                                Math.min(180, newValue)
                                              );
                                              updateReminder(
                                                index,
                                                "minutes",
                                                newValue
                                              );
                                            }}
                                            min={5}
                                            max={180}
                                            step={1}
                                            className="transition-all duration-200"
                                          />
                                        </motion.div>
                                        <motion.div
                                          className="flex justify-between text-xs text-gray-500 mt-1"
                                          initial={{ opacity: 0 }}
                                          animate={{ opacity: 1 }}
                                          transition={{ delay: 0.4 }}
                                        >
                                          <span>5 ph√∫t</span>
                                          <span>3 gi·ªù</span>
                                        </motion.div>
                                      </motion.div>
                                    </div>
                                  </motion.div>
                                ))}
                              </AnimatePresence>

                              <motion.div
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: 0.2 }}
                                whileHover={{ scale: 1.01 }}
                                whileTap={{ scale: 0.99 }}
                              >
                                <Button
                                  type="button"
                                  variant="outline"
                                  onClick={addReminder}
                                  className="w-full border-dashed hover:bg-orange-50 hover:border-orange-200 transition-all duration-200"
                                >
                                  <motion.div
                                    animate={{ rotate: [0, 2, 0] }}
                                    transition={{
                                      duration: 2,
                                      repeat: Infinity,
                                      ease: "easeInOut",
                                    }}
                                    className="mr-2"
                                  >
                                    <Plus className="h-4 w-4 inline-block" />
                                    <span className="inline-block">
                                      Th√™m l·∫ßn nh·∫Øc m·ªõi
                                    </span>
                                  </motion.div>
                                </Button>
                              </motion.div>
                            </CardContent>
                          </Card>
                        </motion.div>
                      </TabsContent>
                    )}
                    {/* Tab 4: Email Reports */}
                    <TabsContent value="email" className="mt-0">
                      <motion.div
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: -20 }}
                        transition={{ duration: 0.3 }}
                      >
                        <Card className="border border-gray-200 shadow-sm">
                          <CardHeader className="pb-4">
                            <CardTitle className="text-lg font-semibold flex items-center gap-2">
                              <motion.div
                                animate={{
                                  rotate: [0, -10, 10, 0],
                                  scale: [1, 1.05, 1],
                                }}
                                transition={{
                                  duration: 3,
                                  repeat: Infinity,
                                  ease: "easeInOut",
                                }}
                              >
                                <Mail className="h-5 w-5 text-green-600" />
                              </motion.div>
                              C·∫•u h√¨nh email b√°o c√°o
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-6">
                            {/* ‚úÖ TOGGLE SWITCH CHO EMAIL REPORTS */}
                            <motion.div
                              className="flex items-center justify-between p-4 bg-gray-50 rounded-lg border-2 border-dashed border-gray-200"
                              initial={{ opacity: 0, y: -10 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: 0.1 }}
                            >
                              <div className="flex items-center gap-3">
                                <motion.div
                                  animate={{
                                    scale: emailReportsEnabled
                                      ? [1, 1.1, 1]
                                      : 1,
                                    rotate: emailReportsEnabled
                                      ? [0, 5, -5, 0]
                                      : 0,
                                  }}
                                  transition={{
                                    duration: 2,
                                    repeat: emailReportsEnabled ? Infinity : 0,
                                    ease: "easeInOut",
                                  }}
                                >
                                  <Mail
                                    className={cn(
                                      "h-5 w-5 transition-colors duration-300",
                                      emailReportsEnabled
                                        ? "text-green-600"
                                        : "text-gray-400"
                                    )}
                                  />
                                </motion.div>
                                <div>
                                  <Label className="text-sm font-medium text-gray-900 cursor-pointer">
                                    G·ª≠i email b√°o c√°o
                                  </Label>
                                  <p className="text-xs text-gray-500 mt-1">
                                    {emailReportsEnabled
                                      ? "H·ªá th·ªëng s·∫Ω g·ª≠i email b√°o c√°o ti·∫øn ƒë·ªô chi·∫øn d·ªãch"
                                      : "T·∫Øt g·ª≠i email b√°o c√°o, ch·ªâ hi·ªÉn th·ªã tr√™n dashboard"}
                                  </p>
                                </div>
                              </div>

                              <motion.div
                                whileHover={{ scale: 1.05 }}
                                whileTap={{ scale: 0.95 }}
                              >
                                <Switch
                                  checked={emailReportsEnabled}
                                  onCheckedChange={(checked) => {
                                    setEmailReportsEnabled(checked);
                                    // Reset email data when disabled
                                    if (!checked) {
                                      setRecipientsTo("");
                                      setRecipientsCc([]);
                                      setCustomEmails([""]);
                                      setReportInterval("60");
                                      setStopSendingTime("");
                                    }
                                  }}
                                  className="data-[state=checked]:bg-green-600"
                                />
                              </motion.div>
                            </motion.div>

                            {/* ‚úÖ EMAIL CONFIGURATION - CH·ªà HI·ªÜN KHI ENABLED */}
                            <AnimatePresence>
                              {emailReportsEnabled && (
                                <motion.div
                                  className="space-y-6"
                                  initial={{ opacity: 0, y: 20, height: 0 }}
                                  animate={{
                                    opacity: 1,
                                    y: 0,
                                    height: "auto",
                                    transition: {
                                      duration: 0.5,
                                      ease: "easeOut",
                                    },
                                  }}
                                  exit={{
                                    opacity: 0,
                                    y: -20,
                                    height: 0,
                                    transition: {
                                      duration: 0.3,
                                      ease: "easeIn",
                                    },
                                  }}
                                >
                                  {/* System emails */}
                                  <motion.div
                                    className="space-y-2"
                                    initial={{ opacity: 0, y: 10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ delay: 0.1 }}
                                  >
                                    <Label className="text-sm font-medium flex items-center gap-2">
                                      <motion.div
                                        animate={{ rotate: 360 }}
                                        transition={{
                                          duration: 20,
                                          repeat: Infinity,
                                          ease: "linear",
                                        }}
                                      >
                                        <Users className="h-3 w-3 text-gray-500" />
                                      </motion.div>
                                      Email t·ª´ h·ªá th·ªëng
                                    </Label>

                                    {loadingUsers ? (
                                      <motion.div
                                        className="flex items-center justify-center p-4 text-sm text-gray-500"
                                        initial={{ opacity: 0 }}
                                        animate={{ opacity: 1 }}
                                      >
                                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500 mr-2"></div>
                                        ƒêang t·∫£i danh s√°ch email...
                                      </motion.div>
                                    ) : (
                                      <motion.div
                                        whileHover={{ scale: 1.01 }}
                                        transition={{ duration: 0.1 }}
                                      >
                                        <MultiSelectCombobox
                                          key={`multiselect-${recipientsTo}-${mode}`}
                                          options={usersWithEmail
                                            .filter((user) => {
                                              const isRecipientsTo =
                                                user.email
                                                  .trim()
                                                  .toLowerCase() ===
                                                recipientsTo
                                                  .trim()
                                                  .toLowerCase();
                                              return !isRecipientsTo;
                                            })
                                            .map((user) => ({
                                              value: user.email,
                                              label: `${user.fullName}${
                                                user.employeeCode
                                                  ? ` (${user.employeeCode})`
                                                  : ""
                                              } - ${user.email}`,
                                            }))}
                                          value={recipientsCc}
                                          onChange={handleSystemEmailSelection} // S·ª≠ d·ª•ng handler m·ªõi
                                          placeholder={
                                            usersWithEmail.length === 0
                                              ? "Kh√¥ng c√≥ email n√†o trong h·ªá th·ªëng"
                                              : "Ch·ªçn ng∆∞·ªùi nh·∫≠n t·ª´ h·ªá th·ªëng..."
                                          }
                                        />
                                      </motion.div>
                                    )}

                                    {usersWithEmail.length === 0 &&
                                      !loadingUsers && (
                                        <motion.p
                                          className="text-sm text-gray-500 mt-1"
                                          initial={{ opacity: 0 }}
                                          animate={{ opacity: 1 }}
                                          transition={{ delay: 0.2 }}
                                        >
                                          Kh√¥ng c√≥ user n√†o c√≥ email trong h·ªá
                                          th·ªëng
                                        </motion.p>
                                      )}
                                  </motion.div>

                                  {/* Ng∆∞·ªùi nh·∫≠n ch√≠nh */}
                                  <motion.div
                                    className="space-y-2"
                                    initial={{ opacity: 0, y: 10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ delay: 0.15 }}
                                  >
                                    <Label className="text-sm font-medium flex items-center gap-2">
                                      <motion.div
                                        animate={{ rotate: 360 }}
                                        transition={{
                                          duration: 15,
                                          repeat: Infinity,
                                          ease: "linear",
                                        }}
                                      >
                                        <AtSign className="h-3 w-3 text-blue-500" />
                                      </motion.div>
                                      Ng∆∞·ªùi nh·∫≠n ch√≠nh{" "}
                                      <span className="text-red-500">*</span>
                                    </Label>

                                    <motion.div
                                      whileHover={{ scale: 1.01 }}
                                      transition={{ duration: 0.1 }}
                                    >
                                      <Input
                                        value={recipientsTo}
                                        onChange={(e) => {
                                          setRecipientsTo(e.target.value);
                                        }}
                                        placeholder="example@email.com"
                                        type="email"
                                        className={cn(
                                          "transition-all duration-200 focus:ring-2 focus:ring-blue-500",
                                          !recipientsTo.trim() &&
                                            (recipientsCc.length > 0 ||
                                              customEmails.some((e) =>
                                                e.trim()
                                              ))
                                            ? "border-orange-300 bg-orange-50"
                                            : ""
                                        )}
                                      />
                                    </motion.div>

                                    {/* Messages v√† warnings t∆∞∆°ng t·ª± nh∆∞ code c≈© */}
                                    {recipientsTo &&
                                      usersWithEmail.some(
                                        (user) =>
                                          user.email.trim().toLowerCase() ===
                                          recipientsTo.trim().toLowerCase()
                                      ) && (
                                        <motion.div
                                          className="mt-2 p-2 bg-blue-50 border border-blue-200 rounded text-sm"
                                          initial={{ opacity: 0 }}
                                          animate={{ opacity: 1 }}
                                        >
                                          <div className="flex items-center gap-2 text-blue-700">
                                            <CheckCircle2 className="h-4 w-4" />
                                            <span>
                                              Email{" "}
                                              <strong>"{recipientsTo}"</strong>{" "}
                                              ƒë√£ ƒë∆∞·ª£c ch·ªçn l√†m ng∆∞·ªùi nh·∫≠n ch√≠nh
                                              n√™n kh√¥ng hi·ªán trong danh s√°ch CC
                                            </span>
                                          </div>
                                        </motion.div>
                                      )}

                                    {/* Warning state khi TO tr·ªëng */}
                                    {!recipientsTo.trim() &&
                                      (recipientsCc.length > 0 ||
                                        customEmails.some((e) => e.trim())) && (
                                        <motion.div className="mt-2 p-3 bg-orange-50 border border-orange-200 rounded-lg">
                                          <div className="flex items-start gap-2 text-orange-700">
                                            <AlertCircle className="h-4 w-4 mt-0.5 flex-shrink-0" />
                                            <div className="flex-1">
                                              <div className="font-medium text-sm">
                                                Ng∆∞·ªùi nh·∫≠n ch√≠nh tr·ªëng!
                                              </div>
                                              <div className="text-xs mt-1 text-orange-600">
                                                Email c·∫ßn c√≥ √≠t nh·∫•t 1 ng∆∞·ªùi
                                                nh·∫≠n ch√≠nh ƒë·ªÉ g·ª≠i b√°o c√°o.
                                              </div>
                                            </div>
                                          </div>

                                          {/* Enhanced Suggestion buttons */}
                                          <div className="mt-3 space-y-2">
                                            <div className="text-xs text-orange-600 font-medium">
                                              üí° G·ª£i √Ω: Ch·ªçn m·ªôt email ƒë·ªÉ l√†m
                                              ng∆∞·ªùi nh·∫≠n ch√≠nh:
                                            </div>

                                            <div className="flex flex-wrap gap-2">
                                              {/* T·ª´ System emails */}
                                              {recipientsCc.map(
                                                (email, index) => (
                                                  <motion.button
                                                    key={`cc-${index}`}
                                                    type="button"
                                                    onClick={() => {
                                                      setRecipientsTo(email);
                                                      setRecipientsCc((prev) =>
                                                        prev.filter(
                                                          (e) => e !== email
                                                        )
                                                      );
                                                    }}
                                                    className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 hover:bg-blue-200 text-blue-700 text-xs rounded-md transition-colors"
                                                    whileHover={{ scale: 1.05 }}
                                                    whileTap={{ scale: 0.95 }}
                                                  >
                                                    <Users className="h-3 w-3" />
                                                    {email}
                                                  </motion.button>
                                                )
                                              )}

                                              {/* T·ª´ Custom emails */}
                                              {customEmails
                                                .filter((e) => e.trim())
                                                .map((email, index) => (
                                                  <motion.button
                                                    key={`custom-${index}`}
                                                    type="button"
                                                    onClick={() => {
                                                      setRecipientsTo(email);
                                                      // Remove from custom emails
                                                      setCustomEmails((prev) =>
                                                        prev.filter(
                                                          (e) => e !== email
                                                        )
                                                      );
                                                    }}
                                                    className="inline-flex items-center gap-1 px-2 py-1 bg-green-100 hover:bg-green-200 text-green-700 text-xs rounded-md transition-colors"
                                                    whileHover={{ scale: 1.05 }}
                                                    whileTap={{ scale: 0.95 }}
                                                  >
                                                    <AtSign className="h-3 w-3" />
                                                    {email}
                                                  </motion.button>
                                                ))}
                                            </div>
                                          </div>
                                        </motion.div>
                                      )}
                                  </motion.div>

                                  {/* Custom emails */}
                                  <motion.div
                                    className="space-y-3"
                                    initial={{ opacity: 0, y: 10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ delay: 0.2 }}
                                  >
                                    <Label className="text-sm font-medium flex items-center gap-2">
                                      <motion.div
                                        animate={{
                                          scale: [1, 1.1, 1],
                                          rotate: [0, 5, -5, 0],
                                        }}
                                        transition={{
                                          duration: 2,
                                          repeat: Infinity,
                                          ease: "easeInOut",
                                        }}
                                      >
                                        <AtSign className="h-3 w-3 text-gray-500" />
                                      </motion.div>
                                      Email t√πy ch·ªânh (CC)
                                    </Label>

                                    <AnimatePresence>
                                      {customEmails.map((email, index) => (
                                        <motion.div
                                          key={index}
                                          className="flex items-center gap-2"
                                          initial={{ opacity: 0, x: -20 }}
                                          animate={{ opacity: 1, x: 0 }}
                                          transition={{ delay: index * 0.1 }}
                                        >
                                          <Input
                                            value={email}
                                            onChange={(e) => {
                                              updateCustomEmail(
                                                index,
                                                e.target.value
                                              );
                                            }}
                                            placeholder="example@email.com"
                                            type="email"
                                            className="transition-all duration-200 focus:ring-2 focus:ring-green-500"
                                          />
                                          {customEmails.length > 1 && (
                                            <Button
                                              type="button"
                                              variant="ghost"
                                              size="sm"
                                              onClick={() => {
                                                removeCustomEmail(index);
                                              }}
                                              className="text-red-600 hover:bg-red-50"
                                            >
                                              <Trash2 className="h-4 w-4" />
                                            </Button>
                                          )}
                                        </motion.div>
                                      ))}
                                    </AnimatePresence>

                                    <motion.div
                                      whileHover={{ scale: 1.01 }}
                                      whileTap={{ scale: 0.99 }}
                                    >
                                      <Button
                                        type="button"
                                        variant="outline"
                                        size="sm"
                                        onClick={addCustomEmail}
                                        className="border-dashed hover:bg-green-50 hover:border-green-200 transition-all duration-200"
                                      >
                                        <motion.div
                                          animate={{ rotate: [0, 2, 0] }}
                                          transition={{
                                            duration: 2,
                                            repeat: Infinity,
                                            ease: "easeInOut",
                                          }}
                                          className="mr-2"
                                        >
                                          <Plus className="h-4 w-4 inline-block" />
                                          <span className="inline-block">
                                            Th√™m email
                                          </span>
                                        </motion.div>
                                      </Button>
                                    </motion.div>
                                  </motion.div>

                                  {/* Email Send Mode Toggle */}
                                  <motion.div
                                    className="space-y-4"
                                    initial={{ opacity: 0, y: 10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ delay: 0.25 }}
                                  >
                                    <div className="bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-lg p-4">
                                      <Label className="text-sm font-medium flex items-center gap-2 mb-3">
                                        <motion.div
                                          animate={{
                                            rotate: [0, 360],
                                            scale: [1, 1.05, 1],
                                          }}
                                          transition={{
                                            rotate: {
                                              duration: 8,
                                              repeat: Infinity,
                                              ease: "linear",
                                            },
                                            scale: {
                                              duration: 3,
                                              repeat: Infinity,
                                              ease: "easeInOut",
                                            },
                                          }}
                                        >
                                          <Mail className="h-4 w-4 text-blue-600" />
                                        </motion.div>
                                        Ch·∫ø ƒë·ªô g·ª≠i email b√°o c√°o
                                      </Label>

                                      <div className="space-y-3">
                                        {/* Toggle Options */}
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                          {/* Interval Mode */}
                                          <motion.button
                                            type="button"
                                            onClick={() =>
                                              setEmailSendMode("interval")
                                            }
                                            whileHover={{ scale: 1.02 }}
                                            whileTap={{ scale: 0.98 }}
                                            className={cn(
                                              "p-3 rounded-lg border-2 transition-all duration-200 text-left",
                                              emailSendMode === "interval"
                                                ? "border-blue-500 bg-blue-50 shadow-md"
                                                : "border-gray-200 hover:border-gray-300 bg-white"
                                            )}
                                          >
                                            <div className="flex items-center gap-3">
                                              <motion.div
                                                className={cn(
                                                  "w-4 h-4 rounded-full border-2 flex items-center justify-center",
                                                  emailSendMode === "interval"
                                                    ? "border-blue-500 bg-blue-500"
                                                    : "border-gray-300"
                                                )}
                                                animate={
                                                  emailSendMode === "interval"
                                                    ? { scale: [1, 1.2, 1] }
                                                    : {}
                                                }
                                                transition={{ duration: 0.3 }}
                                              >
                                                {emailSendMode ===
                                                  "interval" && (
                                                  <motion.div
                                                    className="w-2 h-2 bg-white rounded-full"
                                                    initial={{ scale: 0 }}
                                                    animate={{ scale: 1 }}
                                                    transition={{ delay: 0.1 }}
                                                  />
                                                )}
                                              </motion.div>
                                              <div className="flex-1">
                                                <h4 className="font-medium text-sm text-gray-900 mb-1">
                                                  üîÑ G·ª≠i theo t·∫ßn su·∫•t
                                                </h4>
                                                <p className="text-xs text-gray-600">
                                                  G·ª≠i email b√°o c√°o ƒë·ªãnh k·ª≥ theo
                                                  kho·∫£ng th·ªùi gian
                                                </p>
                                              </div>
                                            </div>
                                          </motion.button>

                                          {/* Completion Mode */}
                                          <motion.button
                                            type="button"
                                            onClick={() =>
                                              setEmailSendMode("completion")
                                            }
                                            whileHover={{ scale: 1.02 }}
                                            whileTap={{ scale: 0.98 }}
                                            className={cn(
                                              "p-3 rounded-lg border-2 transition-all duration-200 text-left",
                                              emailSendMode === "completion"
                                                ? "border-green-500 bg-green-50 shadow-md"
                                                : "border-gray-200 hover:border-gray-300 bg-white"
                                            )}
                                          >
                                            <div className="flex items-center gap-3">
                                              <motion.div
                                                className={cn(
                                                  "w-4 h-4 rounded-full border-2 flex items-center justify-center",
                                                  emailSendMode === "completion"
                                                    ? "border-green-500 bg-green-500"
                                                    : "border-gray-300"
                                                )}
                                                animate={
                                                  emailSendMode === "completion"
                                                    ? { scale: [1, 1.2, 1] }
                                                    : {}
                                                }
                                                transition={{ duration: 0.3 }}
                                              >
                                                {emailSendMode ===
                                                  "completion" && (
                                                  <motion.div
                                                    className="w-2 h-2 bg-white rounded-full"
                                                    initial={{ scale: 0 }}
                                                    animate={{ scale: 1 }}
                                                    transition={{ delay: 0.1 }}
                                                  />
                                                )}
                                              </motion.div>
                                              <div className="flex-1">
                                                <h4 className="font-medium text-sm text-gray-900 mb-1">
                                                  ‚úÖ G·ª≠i khi ho√†n th√†nh
                                                </h4>
                                                <p className="text-xs text-gray-600">
                                                  Ch·ªâ g·ª≠i email m·ªôt l·∫ßn khi
                                                  chi·∫øn d·ªãch k·∫øt th√∫c
                                                </p>
                                              </div>
                                            </div>
                                          </motion.button>
                                        </div>

                                        {/* Current Mode Indicator */}
                                        <motion.div
                                          className={cn(
                                            "p-2 rounded-md text-xs text-center font-medium",
                                            emailSendMode === "interval"
                                              ? "bg-blue-100 text-blue-700"
                                              : "bg-green-100 text-green-700"
                                          )}
                                          key={emailSendMode}
                                          initial={{ opacity: 0, scale: 0.9 }}
                                          animate={{ opacity: 1, scale: 1 }}
                                          transition={{ duration: 0.3 }}
                                        >
                                          {emailSendMode === "interval"
                                            ? "üìä ƒêang ch·ªçn: G·ª≠i email b√°o c√°o ƒë·ªãnh k·ª≥"
                                            : "üéØ ƒêang ch·ªçn: G·ª≠i email khi chi·∫øn d·ªãch ho√†n th√†nh"}
                                        </motion.div>
                                      </div>
                                    </div>
                                  </motion.div>

                                  {/* Interval Settings - Only show when interval mode is selected */}
                                  <AnimatePresence>
                                    {emailSendMode === "interval" && (
                                      <motion.div
                                        className="grid grid-cols-1 md:grid-cols-2 gap-4"
                                        initial={{
                                          opacity: 0,
                                          y: 10,
                                          height: 0,
                                        }}
                                        animate={{
                                          opacity: 1,
                                          y: 0,
                                          height: "auto",
                                        }}
                                        exit={{ opacity: 0, y: -10, height: 0 }}
                                        transition={{ duration: 0.4 }}
                                      >
                                        {/* T·∫ßn su·∫•t g·ª≠i b√°o c√°o */}
                                        <motion.div
                                          className="space-y-2"
                                          initial={{ opacity: 0, x: -10 }}
                                          animate={{ opacity: 1, x: 0 }}
                                          transition={{ delay: 0.1 }}
                                        >
                                          <Label className="text-sm flex items-center gap-2">
                                            <motion.div
                                              animate={{
                                                rotate: [0, 360],
                                                scale: [1, 1.05, 1],
                                              }}
                                              transition={{
                                                rotate: {
                                                  duration: 4,
                                                  repeat: Infinity,
                                                  ease: "linear",
                                                },
                                                scale: {
                                                  duration: 2,
                                                  repeat: Infinity,
                                                  ease: "easeInOut",
                                                },
                                              }}
                                            >
                                              <Clock className="h-3 w-3 text-gray-500" />
                                            </motion.div>
                                            T·∫ßn su·∫•t g·ª≠i b√°o c√°o
                                          </Label>
                                          <motion.div
                                            whileHover={{ scale: 1.01 }}
                                            whileTap={{ scale: 0.99 }}
                                          >
                                            <Select
                                              value={reportInterval}
                                              onValueChange={setReportInterval}
                                            >
                                              <SelectTrigger className="transition-all duration-200 hover:border-green-300">
                                                <SelectValue />
                                              </SelectTrigger>
                                              <SelectContent>
                                                <SelectItem value="30">
                                                  <motion.div
                                                    className="flex items-center gap-2"
                                                    whileHover={{ x: 2 }}
                                                  >
                                                    <span>‚ö°</span>
                                                    M·ªói 30 ph√∫t
                                                  </motion.div>
                                                </SelectItem>
                                                <SelectItem value="60">
                                                  <motion.div
                                                    className="flex items-center gap-2"
                                                    whileHover={{ x: 2 }}
                                                  >
                                                    <span>üïê</span>
                                                    M·ªói 1 gi·ªù
                                                  </motion.div>
                                                </SelectItem>
                                                <SelectItem value="120">
                                                  <motion.div
                                                    className="flex items-center gap-2"
                                                    whileHover={{ x: 2 }}
                                                  >
                                                    <span>üïë</span>
                                                    M·ªói 2 gi·ªù
                                                  </motion.div>
                                                </SelectItem>
                                                <SelectItem value="240">
                                                  <motion.div
                                                    className="flex items-center gap-2"
                                                    whileHover={{ x: 2 }}
                                                  >
                                                    <span>üïì</span>
                                                    M·ªói 4 gi·ªù
                                                  </motion.div>
                                                </SelectItem>
                                              </SelectContent>
                                            </Select>
                                          </motion.div>
                                        </motion.div>

                                        {/* Th·ªùi gian d·ª´ng g·ª≠i */}
                                        <motion.div
                                          className="space-y-2"
                                          initial={{ opacity: 0, x: 10 }}
                                          animate={{ opacity: 1, x: 0 }}
                                          transition={{ delay: 0.2 }}
                                        >
                                          <motion.div
                                            whileHover={{ scale: 1.005 }}
                                            transition={{ duration: 0.1 }}
                                          >
                                            <ModernTimePicker
                                              value={stopSendingTime}
                                              onChange={setStopSendingTime}
                                              label="Th·ªùi gian d·ª´ng g·ª≠i"
                                              timeRange={{
                                                startTime: "08:00",
                                                endTime: "17:45",
                                              }}
                                            />
                                          </motion.div>
                                        </motion.div>
                                      </motion.div>
                                    )}
                                  </AnimatePresence>

                                  {/* Completion Mode Info */}
                                  <AnimatePresence>
                                    {emailSendMode === "completion" && (
                                      <motion.div
                                        className="bg-green-50 border border-green-200 rounded-lg p-4"
                                        initial={{
                                          opacity: 0,
                                          y: 10,
                                          height: 0,
                                        }}
                                        animate={{
                                          opacity: 1,
                                          y: 0,
                                          height: "auto",
                                        }}
                                        exit={{ opacity: 0, y: -10, height: 0 }}
                                        transition={{ duration: 0.4 }}
                                      >
                                        <div className="flex gap-3">
                                          <motion.div
                                            animate={{
                                              rotate: [0, 10, -10, 0],
                                              scale: [1, 1.1, 1],
                                            }}
                                            transition={{
                                              duration: 3,
                                              repeat: Infinity,
                                              ease: "easeInOut",
                                            }}
                                            className="flex-shrink-0 mt-0.5"
                                          >
                                            <CheckCircle2 className="h-5 w-5 text-green-600" />
                                          </motion.div>
                                          <div className="text-sm text-green-800">
                                            <motion.p
                                              className="font-medium mb-1"
                                              initial={{ opacity: 0 }}
                                              animate={{ opacity: 1 }}
                                              transition={{ delay: 0.1 }}
                                            >
                                              Ch·∫ø ƒë·ªô g·ª≠i khi ho√†n th√†nh:
                                            </motion.p>
                                            <motion.ul
                                              className="space-y-1 text-xs"
                                              initial={{ opacity: 0 }}
                                              animate={{ opacity: 1 }}
                                              transition={{ delay: 0.2 }}
                                            >
                                              {[
                                                "üìß Ch·ªâ g·ª≠i 1 email b√°o c√°o duy nh·∫•t",
                                                "‚è∞ G·ª≠i ngay khi chi·∫øn d·ªãch k·∫øt th√∫c",
                                                "üí° Ti·∫øt ki·ªám bƒÉng th√¥ng email",
                                                "üìä B√°o c√°o t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß",
                                              ].map((item, index) => (
                                                <motion.li
                                                  key={index}
                                                  initial={{
                                                    opacity: 0,
                                                    x: -5,
                                                  }}
                                                  animate={{ opacity: 1, x: 0 }}
                                                  transition={{
                                                    delay: 0.3 + index * 0.1,
                                                  }}
                                                >
                                                  {item}
                                                </motion.li>
                                              ))}
                                            </motion.ul>
                                          </div>
                                        </div>
                                      </motion.div>
                                    )}
                                  </AnimatePresence>

                                  {/* Summary indicator */}
                                  <AnimatePresence>
                                    {(recipientsCc.length > 0 ||
                                      customEmails.some((email) =>
                                        email.trim()
                                      )) && (
                                      <motion.div
                                        initial={{
                                          opacity: 0,
                                          scale: 0.9,
                                          y: 10,
                                        }}
                                        animate={{ opacity: 1, scale: 1, y: 0 }}
                                        exit={{
                                          opacity: 0,
                                          scale: 0.9,
                                          y: -10,
                                        }}
                                        className="bg-green-50 border border-green-200 rounded-lg p-3"
                                      >
                                        <div className="flex items-center gap-2 text-green-700">
                                          <motion.div
                                            animate={{
                                              scale: [1, 1.2, 1],
                                              rotate: [0, -10, 10, 0],
                                            }}
                                            transition={{
                                              duration: 2,
                                              repeat: Infinity,
                                            }}
                                          >
                                            <Mail className="h-4 w-4" />
                                          </motion.div>
                                          <span className="text-sm font-medium">
                                            Email ƒë√£ c·∫•u h√¨nh:
                                          </span>
                                          <motion.span
                                            className="text-sm font-semibold"
                                            key={
                                              recipientsCc.length +
                                              customEmails.filter((e) =>
                                                e.trim()
                                              ).length
                                            }
                                            initial={{
                                              scale: 1.2,
                                              color: "#059669",
                                            }}
                                            animate={{
                                              scale: 1,
                                              color: "#059669",
                                            }}
                                            transition={{ duration: 0.2 }}
                                          >
                                            {recipientsCc.length +
                                              customEmails.filter((e) =>
                                                e.trim()
                                              ).length}{" "}
                                            ng∆∞·ªùi nh·∫≠n
                                          </motion.span>
                                        </div>
                                      </motion.div>
                                    )}
                                  </AnimatePresence>
                                </motion.div>
                              )}
                            </AnimatePresence>

                            {/* ‚úÖ MESSAGE KHI T·∫ÆT EMAIL */}
                            <AnimatePresence>
                              {!emailReportsEnabled && (
                                <motion.div
                                  className="text-center p-8"
                                  initial={{ opacity: 0, scale: 0.9 }}
                                  animate={{ opacity: 1, scale: 1 }}
                                  exit={{ opacity: 0, scale: 0.9 }}
                                  transition={{ duration: 0.3 }}
                                >
                                  <motion.div
                                    className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4"
                                    animate={{
                                      rotate: [0, 5, -5, 0],
                                    }}
                                    transition={{
                                      duration: 3,
                                      repeat: Infinity,
                                      ease: "easeInOut",
                                    }}
                                  >
                                    <Mail className="h-8 w-8 text-gray-400" />
                                  </motion.div>
                                  <h3 className="text-lg font-medium text-gray-600 mb-2">
                                    Email b√°o c√°o ƒë√£ t·∫Øt
                                  </h3>
                                  <p className="text-sm text-gray-500">
                                    Ti·∫øn ƒë·ªô chi·∫øn d·ªãch ch·ªâ hi·ªÉn th·ªã tr√™n
                                    dashboard. <br />
                                    B·∫≠t l√™n ƒë·ªÉ nh·∫≠n b√°o c√°o qua email.
                                  </p>
                                </motion.div>
                              )}
                            </AnimatePresence>
                          </CardContent>
                        </Card>
                      </motion.div>
                    </TabsContent>

                    {/* Tab 5: Customer Import */}
                    <TabsContent value="customers" className="mt-0">
                      <motion.div
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: -20 }}
                        transition={{ duration: 0.3 }}
                      >
                        <Card className="border border-gray-200 shadow-sm">
                          <CardHeader className="pb-4">
                            <CardTitle className="text-lg font-semibold flex items-center gap-2">
                              <motion.div
                                animate={{
                                  scale: [1, 1.1, 1],
                                  rotate: [0, 5, -5, 0],
                                }}
                                transition={{
                                  duration: 3,
                                  repeat: Infinity,
                                  ease: "easeInOut",
                                }}
                              >
                                <Users className="h-5 w-5 text-indigo-600" />
                              </motion.div>
                              Import danh s√°ch kh√°ch h√†ng
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-6">
                            {/* Upload area */}
                            <motion.div
                              className="relative"
                              initial={{ opacity: 0, y: 10 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: 0.1 }}
                            >
                              <input
                                type="file"
                                accept=".csv,.xlsx,.xls"
                                onChange={handleCustomerFileUpload}
                                className="hidden"
                                id="customer-upload"
                              />
                              <label
                                htmlFor="customer-upload"
                                className="block cursor-pointer"
                              >
                                <motion.div
                                  whileHover={{
                                    scale: 1.01,
                                    borderColor: "#9ca3af",
                                  }}
                                  whileTap={{ scale: 0.99 }}
                                  className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center transition-all duration-200 bg-gray-50 hover:bg-gray-100"
                                >
                                  <motion.div
                                    animate={{
                                      y: [0, -5, 0],
                                      rotate: [0, 2, -2, 0],
                                    }}
                                    transition={{
                                      duration: 2,
                                      repeat: Infinity,
                                      ease: "easeInOut",
                                    }}
                                  >
                                    <FileSpreadsheet className="h-12 w-12 text-gray-400 mx-auto mb-3" />
                                  </motion.div>
                                  <motion.p
                                    className="text-lg font-medium text-gray-700 mb-1"
                                    initial={{ opacity: 0 }}
                                    animate={{ opacity: 1 }}
                                    transition={{ delay: 0.2 }}
                                  >
                                    K√©o th·∫£ ho·∫∑c nh·∫•n ƒë·ªÉ t·∫£i file
                                  </motion.p>
                                  <motion.p
                                    className="text-sm text-gray-500"
                                    initial={{ opacity: 0 }}
                                    animate={{ opacity: 1 }}
                                    transition={{ delay: 0.3 }}
                                  >
                                    H·ªó tr·ª£ CSV, Excel (.xlsx, .xls) - T·ªëi ƒëa
                                    10MB
                                  </motion.p>
                                </motion.div>
                              </label>
                            </motion.div>

                            {/* Download sample */}
                            <motion.div
                              className="text-center"
                              initial={{ opacity: 0, y: 10 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: 0.2 }}
                            >
                              <motion.div
                                whileHover={{ scale: 1.05 }}
                                whileTap={{ scale: 0.95 }}
                              >
                                <Button
                                  type="button"
                                  variant="outline"
                                  onClick={downloadSampleFile}
                                  size="sm"
                                  className="hover:bg-indigo-50 hover:border-indigo-200 transition-all duration-200"
                                >
                                  <motion.div
                                    animate={{
                                      y: [0, -2, 0],
                                    }}
                                    transition={{
                                      duration: 1.5,
                                      repeat: Infinity,
                                      ease: "easeInOut",
                                    }}
                                    className="mr-2"
                                  >
                                    <Download className="h-4 w-4 inline-block" />
                                    <span className="inline-block">
                                      T·∫£i file m·∫´u
                                    </span>
                                  </motion.div>
                                </Button>
                              </motion.div>
                            </motion.div>

                            {/* Preview uploaded customers */}
                            <AnimatePresence>
                              {uploadedCustomers.length > 0 && (
                                <motion.div
                                  className="space-y-3"
                                  initial={{ opacity: 0, y: 20, scale: 0.95 }}
                                  animate={{ opacity: 1, y: 0, scale: 1 }}
                                  exit={{ opacity: 0, y: -20, scale: 0.95 }}
                                  transition={{ duration: 0.4 }}
                                >
                                  <motion.div
                                    className="flex items-center justify-between"
                                    initial={{ opacity: 0, x: -10 }}
                                    animate={{ opacity: 1, x: 0 }}
                                    transition={{ delay: 0.1 }}
                                  >
                                    <div className="flex items-center gap-2">
                                      <motion.div
                                        animate={{
                                          scale: [1, 1.2, 1],
                                          rotate: [0, 360],
                                        }}
                                        transition={{
                                          scale: {
                                            duration: 1,
                                            repeat: Infinity,
                                          },
                                          rotate: {
                                            duration: 2,
                                            repeat: Infinity,
                                            ease: "linear",
                                          },
                                        }}
                                      >
                                        <CheckCircle2 className="h-5 w-5 text-green-600" />
                                      </motion.div>
                                      <motion.span
                                        className="font-medium"
                                        initial={{ opacity: 0 }}
                                        animate={{ opacity: 1 }}
                                        transition={{ delay: 0.2 }}
                                      >
                                        ƒê√£ t·∫£i th√†nh c√¥ng{" "}
                                        <motion.span
                                          className="text-green-600 font-bold"
                                          key={uploadedCustomers.length}
                                          initial={{
                                            scale: 1.3,
                                            color: "#059669",
                                          }}
                                          animate={{
                                            scale: 1,
                                            color: "#059669",
                                          }}
                                          transition={{ duration: 0.3 }}
                                        >
                                          {uploadedCustomers.length}
                                        </motion.span>{" "}
                                        kh√°ch h√†ng
                                      </motion.span>
                                    </div>
                                    <motion.div
                                      whileHover={{ scale: 1.1 }}
                                      whileTap={{ scale: 0.9 }}
                                    >
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        onClick={() => {
                                          setCustomerFile(null);
                                          setUploadedCustomers([]);
                                        }}
                                        className="text-red-600 hover:bg-red-50"
                                      >
                                        <motion.div
                                          whileHover={{ rotate: 90 }}
                                          transition={{ duration: 0.2 }}
                                          className="mr-1"
                                        >
                                          <Trash2 className="h-4 w-4" />
                                        </motion.div>
                                        X√≥a
                                      </Button>
                                    </motion.div>
                                  </motion.div>

                                  <motion.div
                                    className="border rounded-lg overflow-hidden"
                                    initial={{ opacity: 0, scale: 0.98 }}
                                    animate={{ opacity: 1, scale: 1 }}
                                    transition={{ delay: 0.3 }}
                                  >
                                    <motion.div
                                      className="bg-gray-50 px-4 py-2 border-b"
                                      initial={{ opacity: 0, y: -10 }}
                                      animate={{ opacity: 1, y: 0 }}
                                      transition={{ delay: 0.4 }}
                                    >
                                      <div className="grid grid-cols-3 gap-4 text-sm font-medium text-gray-700">
                                        <motion.div
                                          initial={{ opacity: 0, x: -5 }}
                                          animate={{ opacity: 1, x: 0 }}
                                          transition={{ delay: 0.5 }}
                                        >
                                          S·ªë ƒëi·ªán tho·∫°i
                                        </motion.div>
                                        <motion.div
                                          initial={{ opacity: 0, x: -5 }}
                                          animate={{ opacity: 1, x: 0 }}
                                          transition={{ delay: 0.6 }}
                                        >
                                          T√™n kh√°ch h√†ng
                                        </motion.div>
                                        <motion.div
                                          initial={{ opacity: 0, x: -5 }}
                                          animate={{ opacity: 1, x: 0 }}
                                          transition={{ delay: 0.7 }}
                                        >
                                          X∆∞ng h√¥
                                        </motion.div>
                                      </div>
                                    </motion.div>
                                    <div className="max-h-48 overflow-y-auto">
                                      <AnimatePresence>
                                        {uploadedCustomers
                                          .slice(0, 10)
                                          .map((customer, index) => (
                                            <motion.div
                                              key={index}
                                              initial={{ opacity: 0, y: 10 }}
                                              animate={{ opacity: 1, y: 0 }}
                                              exit={{ opacity: 0, y: -10 }}
                                              transition={{
                                                delay: 0.5 + index * 0.05,
                                                duration: 0.3,
                                              }}
                                              whileHover={{
                                                backgroundColor: "#f9fafb",
                                                scale: 1.005,
                                              }}
                                              className="grid grid-cols-3 gap-4 px-4 py-2 border-b border-gray-100 cursor-default"
                                            >
                                              <motion.div
                                                className="text-sm font-mono"
                                                initial={{ opacity: 0 }}
                                                animate={{ opacity: 1 }}
                                                transition={{
                                                  delay: 0.6 + index * 0.05,
                                                }}
                                              >
                                                {customer.phone_number}
                                              </motion.div>
                                              <motion.div
                                                className="text-sm font-medium"
                                                initial={{ opacity: 0 }}
                                                animate={{ opacity: 1 }}
                                                transition={{
                                                  delay: 0.7 + index * 0.05,
                                                }}
                                              >
                                                {customer.full_name}
                                              </motion.div>
                                              <motion.div
                                                className="text-sm text-gray-600"
                                                initial={{ opacity: 0 }}
                                                animate={{ opacity: 1 }}
                                                transition={{
                                                  delay: 0.8 + index * 0.05,
                                                }}
                                              >
                                                {customer.salutation || "--"}
                                              </motion.div>
                                            </motion.div>
                                          ))}
                                      </AnimatePresence>
                                    </div>
                                    {uploadedCustomers.length > 10 && (
                                      <motion.div
                                        className="bg-gray-50 px-4 py-2 text-center text-sm text-gray-600"
                                        initial={{ opacity: 0 }}
                                        animate={{ opacity: 1 }}
                                        transition={{ delay: 1 }}
                                      >
                                        <motion.span
                                          animate={{
                                            scale: [1, 1.05, 1],
                                          }}
                                          transition={{
                                            duration: 2,
                                            repeat: Infinity,
                                            ease: "easeInOut",
                                          }}
                                        >
                                          ... v√† {uploadedCustomers.length - 10}{" "}
                                          kh√°ch h√†ng kh√°c
                                        </motion.span>
                                      </motion.div>
                                    )}
                                  </motion.div>
                                </motion.div>
                              )}
                            </AnimatePresence>

                            {/* Info */}
                            <motion.div
                              className="bg-blue-50 border border-blue-200 rounded-lg p-4"
                              initial={{ opacity: 0, y: 10 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: 0.3 }}
                              whileHover={{ scale: 1.005 }}
                            >
                              <div className="flex gap-3">
                                <motion.div
                                  animate={{
                                    rotate: [0, 10, -10, 0],
                                    scale: [1, 1.1, 1],
                                  }}
                                  transition={{
                                    duration: 3,
                                    repeat: Infinity,
                                    ease: "easeInOut",
                                  }}
                                  className="flex-shrink-0 mt-0.5"
                                >
                                  <AlertCircle className="h-5 w-5 text-blue-600" />
                                </motion.div>
                                <div className="text-sm text-blue-800">
                                  <motion.p
                                    className="font-medium mb-1"
                                    initial={{ opacity: 0 }}
                                    animate={{ opacity: 1 }}
                                    transition={{ delay: 0.4 }}
                                  >
                                    ƒê·ªãnh d·∫°ng file:
                                  </motion.p>
                                  <motion.ul
                                    className="space-y-0.5 text-xs"
                                    initial={{ opacity: 0 }}
                                    animate={{ opacity: 1 }}
                                    transition={{ delay: 0.5 }}
                                  >
                                    {[
                                      "D√≤ng ƒë·∫ßu ti√™n l√† ti√™u ƒë·ªÅ c·ªôt",
                                      "C·ªôt 1: S·ªë ƒëi·ªán tho·∫°i (b·∫Øt bu·ªôc)",
                                      "C·ªôt 2: T√™n kh√°ch h√†ng (b·∫Øt bu·ªôc)",
                                      "C·ªôt 3: X∆∞ng h√¥ (t√πy ch·ªçn)",
                                    ].map((item, index) => (
                                      <motion.li
                                        key={index}
                                        initial={{ opacity: 0, x: -5 }}
                                        animate={{ opacity: 1, x: 0 }}
                                        transition={{
                                          delay: 0.6 + index * 0.1,
                                        }}
                                      >
                                        ‚Ä¢ {item}
                                      </motion.li>
                                    ))}
                                  </motion.ul>
                                </div>
                              </div>
                            </motion.div>
                          </CardContent>
                        </Card>
                      </motion.div>
                    </TabsContent>
                    {/* Keeping the existing logic but adding motion wrappers */}
                  </div>
                </Tabs>
              </div>

              {/* ENHANCED FOOTER */}
              <motion.div
                className="flex-shrink-0 p-4 bg-gray-50 border-t shadow-lg relative z-10"
                initial={{ y: 20, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ delay: 0.4 }}
              >
                <div className="flex justify-between items-center">
                  <div className="flex-shrink-0">
                    <Button
                      onClick={async () => {
                        // ‚úÖ KH√îNG G·ªåI resetForm() KHI C√ì ERROR ALERT
                        if (
                          alert &&
                          (alert.type === "error" || alert.type === "warning")
                        ) {
                          onOpenChange(false);
                          return;
                        }

                        if (mode === "create") {
                          resetForm();
                          // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ state ƒë∆∞·ª£c reset ho√†n to√†n
                          await new Promise((resolve) =>
                            setTimeout(resolve, 50)
                          );
                        } else {
                          if (initialData) {
                            loadCampaignData(initialData);
                            await new Promise((resolve) =>
                              setTimeout(resolve, 50)
                            );
                          }
                        }
                        onOpenChange(false);
                      }}
                      disabled={isSubmitting}
                      size="sm"
                      className="hover:bg-gray-100 transition-colors"
                    >
                      H·ªßy
                    </Button>
                  </div>

                  <div className="flex items-center gap-2 flex-shrink-0">
                    {currentTab !== "basic" && (
                      <motion.div
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: -20 }}
                      >
                        <Button
                          variant="outline"
                          onClick={() => {
                            if (currentTab === "schedule")
                              setCurrentTab("basic");
                            else if (currentTab === "reminders")
                              setCurrentTab("schedule");
                            else if (currentTab === "email")
                              setCurrentTab(
                                needsReminderTab ? "reminders" : "schedule"
                              );
                            else if (currentTab === "customers")
                              setCurrentTab("email");
                          }}
                          size="sm"
                          className="flex items-center gap-1 hover:bg-gray-100 transition-colors"
                        >
                          <ChevronRight className="h-4 w-4 rotate-180 inline-block" />
                          <span className="inline-block">Quay l·∫°i</span>
                        </Button>
                      </motion.div>
                    )}

                    {currentTab !== "customers" ? (
                      <motion.div
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        <Button
                          onClick={() => {
                            if (currentTab === "basic" && canProceedFromTab1)
                              setCurrentTab("schedule");
                            else if (
                              currentTab === "schedule" &&
                              canProceedFromTab2
                            ) {
                              setCurrentTab(
                                needsReminderTab ? "reminders" : "email"
                              );
                            } else if (
                              currentTab === "reminders" &&
                              canProceedFromTab3
                            )
                              setCurrentTab("email");
                            else if (currentTab === "email")
                              setCurrentTab("customers");
                          }}
                          disabled={
                            (currentTab === "basic" && !canProceedFromTab1) ||
                            (currentTab === "schedule" &&
                              !canProceedFromTab2) ||
                            (currentTab === "reminders" && !canProceedFromTab3)
                          }
                          size="sm"
                          className={cn(
                            "flex items-center gap-1 transition-all duration-300",
                            // ‚úÖ Enhanced visual feedback
                            (currentTab === "basic" && !canProceedFromTab1) ||
                              (currentTab === "schedule" &&
                                (!canProceedFromTab2 ||
                                  messageValidationError ||
                                  attachmentValidationError)) ||
                              (currentTab === "reminders" &&
                                (!canProceedFromTab3 ||
                                  reminderValidationErrors.some(
                                    (e) => e !== null
                                  )))
                              ? "opacity-50 cursor-not-allowed bg-red-100 hover:bg-red-100 text-red-600 border-red-200 shadow-red-100 animate-pulse"
                              : "hover:bg-blue-700 shadow-blue-100"
                          )}
                          title={
                            // ‚úÖ Detailed tooltip
                            currentTab === "basic" && !canProceedFromTab1
                              ? "Vui l√≤ng nh·∫≠p t√™n ch∆∞∆°ng tr√¨nh v√† ch·ªçn lo·∫°i ch∆∞∆°ng tr√¨nh"
                              : currentTab === "schedule" && !canProceedFromTab2
                              ? attachmentValidationError
                                ? `L·ªói ƒë√≠nh k√®m: ${attachmentValidationError}`
                                : messageValidationError
                                ? `L·ªói tin nh·∫Øn: ${messageValidationError}`
                                : "Vui l√≤ng ho√†n th√†nh n·ªôi dung tin nh·∫Øn, ƒë√≠nh k√®m v√† l·ªãch tr√¨nh"
                              : currentTab === "reminders" &&
                                !canProceedFromTab3
                              ? "Vui l√≤ng ho√†n th√†nh c·∫•u h√¨nh nh·∫Øc l·∫°i"
                              : "Ti·∫øp t·ª•c ƒë·∫øn b∆∞·ªõc ti·∫øp theo"
                          }
                        >
                          <span className="inline-block">Ti·∫øp t·ª•c</span>
                          <ArrowRight
                            className={cn(
                              "h-4 w-4 inline-block transition-transform",
                              // ‚úÖ Shake effect khi c√≥ l·ªói
                              (currentTab === "schedule" &&
                                (messageValidationError ||
                                  attachmentValidationError)) ||
                                (currentTab === "reminders" &&
                                  reminderValidationErrors.some(
                                    (e) => e !== null
                                  ))
                                ? "animate-bounce"
                                : ""
                            )}
                          />
                        </Button>
                      </motion.div>
                    ) : (
                      <motion.div
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        <Button
                          onClick={handleSubmit}
                          disabled={isSubmitting}
                          className="bg-green-600 hover:bg-green-700 flex items-center gap-2 transition-colors"
                          size="sm"
                        >
                          {isSubmitting ? (
                            <>
                              <motion.div
                                className="h-4 w-4 border-2 border-white border-t-transparent rounded-full inline-block"
                                animate={{ rotate: 360 }}
                                transition={{
                                  duration: 1,
                                  repeat: Infinity,
                                  ease: "linear",
                                }}
                              />
                              <span className="ml-2 inline-block">
                                {mode === "edit"
                                  ? "ƒêang c·∫≠p nh·∫≠t..."
                                  : "ƒêang t·∫°o..."}
                              </span>
                            </>
                          ) : (
                            <>
                              <Send className="h-4 w-4 inline-block" />
                              <span className="ml-2 inline-block">
                                {submitButtonText}
                              </span>
                            </>
                          )}
                        </Button>
                      </motion.div>
                    )}
                  </div>
                </div>
              </motion.div>

              {/* Enhanced Success overlay */}
              <AnimatePresence>
                {showSuccess && (
                  <motion.div
                    className="absolute inset-0 bg-black/50 flex items-center justify-center z-50"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                  >
                    <motion.div
                      className="bg-white rounded-lg p-6 text-center shadow-xl max-w-sm"
                      initial={{ scale: 0.5, y: 20 }}
                      animate={{ scale: 1, y: 0 }}
                      exit={{ scale: 0.5, y: 20 }}
                      transition={{
                        type: "spring",
                        damping: 25,
                        stiffness: 300,
                      }}
                    >
                      <motion.div
                        className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4"
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        transition={{
                          delay: 0.2,
                          type: "spring",
                          damping: 25,
                          stiffness: 300,
                        }}
                      >
                        <motion.div
                          initial={{ scale: 0, rotate: -90 }}
                          animate={{ scale: 1, rotate: 0 }}
                          transition={{ delay: 0.3 }}
                        >
                          <CheckCircle2 className="h-8 w-8 text-green-600" />
                        </motion.div>
                      </motion.div>
                      <motion.h3
                        className="text-lg font-semibold text-gray-900 mb-2"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 0.4 }}
                      >
                        {successMessage}
                      </motion.h3>
                      <motion.p
                        className="text-gray-600"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 0.5 }}
                      >
                        {successDescription}
                      </motion.p>
                    </motion.div>
                  </motion.div>
                )}
              </AnimatePresence>
            </DialogContent>
          </Dialog>
        )}
      </AnimatePresence>
    </>
  );
}
