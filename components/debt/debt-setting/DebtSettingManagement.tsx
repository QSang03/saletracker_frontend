import React, { useState } from "react";
import { Table, TableHeader, TableBody, TableHead, TableRow, TableCell } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Tooltip, TooltipTrigger, TooltipContent } from "@/components/ui/tooltip";
import { WrenchIcon, EyeIcon } from "@heroicons/react/24/outline";
import ConfirmDialog from "@/components/ui/ConfirmDialog";
import axios from "axios";
import { getAccessToken } from "@/lib/auth";
import { ServerResponseAlert } from "@/components/ui/loading/ServerResponseAlert";
import EditDebtConfigModal from "./EditDebtConfigModal";
import DebtDetailDialog from "./DebtDetailDialog";

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || "";

interface DebtSettingManagementProps {
  data: any[];
  page: number;
  pageSize: number;
  onToggle?: (id: string, type: 'send' | 'repeat', value: boolean, updatedRow?: any) => void;
  onDelete?: (id: string) => void;
  onEdit?: (row: any) => void;
  onRefresh?: () => void;
  onShowAlert?: (alert: { type: 'success' | 'error'; message: string }) => void;
  onUpdateRow?: (id: string, updatedData: any) => void; // Th√™m prop m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t row
}

export default function DebtSettingManagement({
  data,
  page,
  pageSize,
  onToggle,
  onDelete,
  onEdit,
  onRefresh,
  onShowAlert,
  onUpdateRow,
}: DebtSettingManagementProps) {
  // Map lo·∫°i kh√°ch h√†ng
  const customerTypeMap: Record<string, string> = {
    cash: "Ti·ªÅn M·∫∑t",
    fixed: "C·ªë ƒê·ªãnh",
    "non-fixed": "Kh√¥ng C·ªë ƒê·ªãnh",
  };
  // Map th·ª© trong tu·∫ßn
  const weekdayMap = [
    null, // 0 kh√¥ng d√πng
    null, // 1 kh√¥ng d√πng
    "Th·ª© 2",
    "Th·ª© 3",
    "Th·ª© 4",
    "Th·ª© 5",
    "Th·ª© 6",
    "Th·ª© 7",
  ];
  // Map tr·∫°ng th√°i nh·∫Øc n·ª£ sang ti·∫øng Vi·ªát v√† m√†u s·∫Øc
  const remindStatusMap: Record<string, { label: string; color: string }> = {
    "Debt Reported": { label: "ƒê√£ G·ª≠i B√°o N·ª£", color: "text-blue-600 font-semibold" },
    "First Reminder": { label: "ƒê√£ G·ª≠i Nh·∫Øc L·∫ßn 1", color: "text-orange-500 font-semibold" },
    "Second Reminder": { label: "ƒê√£ G·ª≠i Nh·∫Øc L·∫ßn 2", color: "text-yellow-600 font-semibold" },
    "Customer Responded": { label: "Kh√°ch ƒê√£ Ph·∫£n H·ªìi", color: "text-green-600 font-semibold" },
    "Not Sent": { label: "Ch∆∞a G·ª≠i", color: "text-gray-500 font-semibold" },
    "Error Send": { label: "G·ª≠i Kh√¥ng Th√†nh C√¥ng", color: "text-red-600 font-semibold" },
  };
  
  // State ƒë·ªÉ l∆∞u data local ƒë·ªÉ c·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c
  const [localData, setLocalData] = useState(data);
  
  // C·∫≠p nh·∫≠t localData khi data props thay ƒë·ªïi
  React.useEffect(() => {
    setLocalData(data);
  }, [data]);
  
  // T·∫°o m·∫£ng ƒë·ªß s·ªë d√≤ng (d·ªØ li·ªáu th·∫≠t + d√≤ng ·∫£o) t·ª´ localData
  const rows = Array.from({ length: pageSize }).map((_, idx) => localData[idx] || null);
  const [confirmState, setConfirmState] = useState({
    open: false,
    type: undefined as 'send' | 'repeat' | undefined,
    row: null as any,
    nextValue: false,
    loading: false, // Th√™m loading state
  });
  const [alert, setAlert] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  // State x√°c nh·∫≠n x√≥a
  const [deleteState, setDeleteState] = useState<{ open: boolean; row: any }>({ open: false, row: null });
  const [editModal, setEditModal] = useState<{ open: boolean; id: string | null }>({ open: false, id: null });
  // State cho dialog xem chi ti·∫øt c√¥ng n·ª£
  const [detailDialog, setDetailDialog] = useState<{ open: boolean; debtConfigId: string | null }>({ open: false, debtConfigId: null });

  // Debug useEffect ƒë·ªÉ theo d√µi state changes
  React.useEffect(() => {
    console.log('üîç detailDialog state changed:', detailDialog);
  }, [detailDialog]);

  // Utility function ƒë·ªÉ format date an to√†n
  const formatUpdateInfo = (actor: any, lastUpdateAt: any) => {
    try {
      if (!actor || !lastUpdateAt) return null;
      
      let updateDate: Date;
      
      // Th·ª≠ parse theo nhi·ªÅu format
      if (typeof lastUpdateAt === 'string') {
        // Th·ª≠ parse ISO string tr∆∞·ªõc
        updateDate = new Date(lastUpdateAt);
        
        // N·∫øu kh√¥ng th√†nh c√¥ng, th·ª≠ parse DD/MM/YYYY HH:mm:ss
        if (isNaN(updateDate.getTime())) {
          const parts = lastUpdateAt.match(/(\d{1,2})\/(\d{1,2})\/(\d{4})\s+(\d{1,2}):(\d{1,2}):(\d{1,2})/);
          if (parts) {
            const [, day, month, year, hour, minute, second] = parts;
            updateDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second));
          }
        }
      } else {
        updateDate = new Date(lastUpdateAt);
      }
      
      if (isNaN(updateDate.getTime())) {
        console.warn('Invalid date detected:', lastUpdateAt);
        return `${actor.fullName} ƒë√£ thay ƒë·ªïi`;
      }
      
      return `${actor.fullName} ƒë√£ thay ƒë·ªïi l√∫c ${updateDate.toLocaleDateString('vi-VN')} ${updateDate.toLocaleTimeString('vi-VN')}`;
    } catch (error) {
      console.error('formatUpdateInfo error:', error, 'lastUpdateAt:', lastUpdateAt);
      return actor?.fullName ? `${actor.fullName} ƒë√£ thay ƒë·ªïi` : null;
    }
  };

  const handleSwitchClick = (row: any, type: 'send' | 'repeat', nextValue: boolean) => {
    setConfirmState({ open: true, type, row, nextValue, loading: false });
  };

  const handleConfirm = async () => {
    if (!confirmState.row) return;
    
    // C·∫≠p nh·∫≠t local state ngay l·∫≠p t·ª©c ƒë·ªÉ UI kh√¥ng b·ªã lag
    const optimisticUpdate = (rowId: string, updates: any) => {
      setLocalData(prevData => 
        prevData.map(item => 
          item?.id === rowId ? { ...item, ...updates } : item
        )
      );
    };
    
    try {
      const token = getAccessToken();
      const headers = token ? { Authorization: `Bearer ${token}` } : {};
      let res, updatedRow;
      
      if (confirmState.type === 'send') {
        // Optimistic update
        const updates = { 
          is_send: confirmState.nextValue,
          // N·∫øu t·∫Øt send th√¨ c≈©ng t·∫Øt repeat
          ...(confirmState.nextValue ? {} : { is_repeat: false })
        };
        optimisticUpdate(confirmState.row.id, updates);
        
        res = await axios.patch(`${API_BASE_URL}/debt-configs/${confirmState.row.id}/toggle-send`, { is_send: confirmState.nextValue }, { headers });
        updatedRow = res.data;
        
        // C·∫≠p nh·∫≠t v·ªõi data th·ª±c t·ª´ server (bao g·ªìm actor, last_update_at)
        optimisticUpdate(confirmState.row.id, updatedRow);
        
        if (onToggle) onToggle(confirmState.row.id, 'send', confirmState.nextValue, updatedRow);
        if (onUpdateRow) onUpdateRow(confirmState.row.id, updatedRow);
        setAlert({ type: 'success', message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i g·ª≠i t·ª± ƒë·ªông th√†nh c√¥ng!' });
        
      } else if (confirmState.type === 'repeat') {
        // Optimistic update
        optimisticUpdate(confirmState.row.id, { is_repeat: confirmState.nextValue });
        
        res = await axios.patch(`${API_BASE_URL}/debt-configs/${confirmState.row.id}/toggle-repeat`, { is_repeat: confirmState.nextValue }, { headers });
        updatedRow = res.data;
        
        // C·∫≠p nh·∫≠t v·ªõi data th·ª±c t·ª´ server (bao g·ªìm actor, last_update_at)
        optimisticUpdate(confirmState.row.id, updatedRow);
        
        if (onToggle) onToggle(confirmState.row.id, 'repeat', confirmState.nextValue, updatedRow);
        if (onUpdateRow) onUpdateRow(confirmState.row.id, updatedRow);
        setAlert({ type: 'success', message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i g·ª≠i nh·∫Øc l·∫°i th√†nh c√¥ng!' });
      }
    } catch (e) {
      // Rollback optimistic update on error
      setLocalData(data);
      setAlert({ type: 'error', message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i!' });
    }
    setConfirmState({ open: false, type: undefined, row: null, nextValue: false, loading: false });
  };

  const handleCancel = () => setConfirmState({ open: false, type: undefined, row: null, nextValue: false, loading: false });
  const handleEdit = (row: any) => {
    setEditModal({ open: true, id: row.id });
  };
  // M·ªü dialog xem chi ti·∫øt c√¥ng n·ª£
  const handleViewDetail = (row: any) => {
    console.log('üîç handleViewDetail called with row:', row);
    setDetailDialog({ open: true, debtConfigId: row.id });
  };

  return (
    <div className="border rounded-xl shadow-inner overflow-x-auto always-show-scrollbar">
      <Table className="min-w-[900px]">
        <TableHeader>
          <TableRow>
            <TableHead className="w-12 text-center px-3 py-2">#</TableHead>
            <TableHead className="px-3 py-2 text-left">M√£ Kh√°ch H√†ng</TableHead>
            <TableHead className="px-3 py-2 text-left">T√™n Zalo Kh√°ch</TableHead>
            <TableHead className="px-3 py-2 text-center">T·ªïng Phi·∫øu</TableHead>
            <TableHead className="px-3 py-2 text-center">T·ªïng S·ªë N·ª£</TableHead>
            <TableHead className="px-3 py-2 text-center">Lo·∫°i KH</TableHead>
            <TableHead className="px-3 py-2 text-center">L·ªãch Nh·∫Øc N·ª£</TableHead>
            <TableHead className="px-3 py-2 text-center">Ng√†y ƒê√£ Nh·∫Øc</TableHead>
            <TableHead className="px-3 py-2 text-center">Tr·∫°ng Th√°i Nh·∫Øc N·ª£</TableHead>
            <TableHead className="px-3 py-2 text-center">Ghi Ch√∫</TableHead>
            <TableHead className="px-3 py-2 text-center">Tr·∫°ng Th√°i Ho·∫°t ƒê·ªông</TableHead>
            <TableHead className="px-3 py-2 text-center">Thao T√°c</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {rows.map((row, idx) => {
            const isEven = idx % 2 === 0;
            const isEmployeeNull = row && row.employee == null;
            const rowClass = isEmployeeNull
              ? "bg-[#ffd6d6]" // ƒë·ªè nh·∫°t ƒë·∫≠m h∆°n
              : isEven
              ? "bg-white"
              : "bg-gray-200";
            if (!row) {
              // D√≤ng ·∫£o
              return (
                <TableRow key={`empty-${idx}`} className={rowClass + " select-none"} style={{ height: 49, opacity: 0.7, pointerEvents: "none" }} aria-hidden="true">
                  {Array.from({ length: 12 }).map((_, i) => (
                    <TableCell key={i} />
                  ))}
                </TableRow>
              );
            }
            // Map d·ªØ li·ªáu t·ª´ backend
            const debtLogs = Array.isArray(row.debt_logs) ? row.debt_logs : [];
            // T·ªïng s·ªë phi·∫øu v√† t·ªïng s·ªë n·ª£ l·∫•y t·ª´ backend
            const totalBills = typeof row.total_bills !== 'undefined' ? row.total_bills : 0;
            const totalDebt = typeof row.total_debt !== 'undefined' && row.total_debt !== null
              ? Number(row.total_debt).toLocaleString('vi-VN')
              : "--";
            // Map lo·∫°i kh√°ch h√†ng
            const customerType = customerTypeMap[row.customer_type] || row.customer_type || "--";
            // L·ªãch nh·∫Øc n·ª£
            let remindSchedule = "--";
            if (typeof row.gap_day === 'number') {
              if (row.gap_day === 0) remindSchedule = "Nh·∫Øc Li√™n T·ª•c";
              else if (row.gap_day > 0) remindSchedule = `C√°ch ${row.gap_day} ng√†y`;
            } else if (Array.isArray(row.day_of_week) && row.day_of_week.length > 0) {
              // S·∫Øp x·∫øp tƒÉng d·∫ßn cho ƒë·∫πp
              remindSchedule = row.day_of_week
                .slice()
                .sort((a: number, b: number) => a - b)
                .map((d: number) => weekdayMap[d] || `Th·ª© ${d}`)
                .join(", ");
            }
            // Ng√†y ƒë√£ nh·∫Øc: l·∫•y t·ª´ send_last_at, hi·ªÉn th·ªã ng√†y v√† gi·ªù xu·ªëng 2 d√≤ng
            let lastRemindedDateStr = "--";
            let lastRemindedDateTime = null;
            if (row.send_last_at) {
              const dateObj = new Date(row.send_last_at);
              lastRemindedDateStr = dateObj.toLocaleDateString('vi-VN');
              lastRemindedDateTime = dateObj.toLocaleTimeString('vi-VN');
            }
            // Tr·∫°ng th√°i nh·∫Øc n·ª£: l·∫•y remind_status c·ªßa log m·ªõi nh·∫•t
            let remindStatus = "--";
            let remindStatusColor = "";
            if (debtLogs.length) {
              const latestLog = debtLogs.reduce((latest: any, log: any) => {
                if (!latest) return log;
                return new Date(log.created_at) > new Date(latest.created_at) ? log : latest;
              }, null);
              if (latestLog?.remind_status && remindStatusMap[latestLog.remind_status]) {
                remindStatus = remindStatusMap[latestLog.remind_status].label;
                remindStatusColor = remindStatusMap[latestLog.remind_status].color;
              } else {
                remindStatus = latestLog?.remind_status || "--";
                remindStatusColor = "";
              }
            }
            if (isEmployeeNull) {
              return (
                <Tooltip key={row.id || idx}>
                  <TooltipTrigger asChild>
                    <TableRow className={rowClass} style={{ cursor: 'pointer' }}>
                      <TableCell className="text-center px-3 py-2">{(page - 1) * pageSize + idx + 1}</TableCell>
                      <TableCell className="px-3 py-2 text-left">{row.customer_code}</TableCell>
                      <TableCell className="px-3 py-2 text-left">{row.customer_name || "--"}</TableCell>
                      <TableCell className="px-3 py-2 text-center">{typeof row.total_bills !== 'undefined' ? row.total_bills : 0}</TableCell>
                      <TableCell className="px-3 py-2 text-center">{typeof row.total_debt !== 'undefined' && row.total_debt !== null ? Number(row.total_debt).toLocaleString('vi-VN') : "--"}</TableCell>
                      <TableCell className="px-3 py-2 text-center">{customerTypeMap[row.customer_type] || row.customer_type || "--"}</TableCell>
                      <TableCell className="px-3 py-2 text-center">{remindSchedule}</TableCell>
                      <TableCell className="px-3 py-2 text-center">{row.send_last_at ? (<><div>{lastRemindedDateStr}</div><div className="text-xs text-gray-500">{lastRemindedDateTime}</div></>) : <span className="text-gray-400 italic">Ch∆∞a Nh·∫Øc N·ª£</span>}</TableCell>
                      <TableCell className={`px-3 py-2 text-center ${remindStatusColor}`}>{remindStatus}</TableCell>
                      <TableCell className="px-3 py-2 text-center">
                        {(() => {
                          const updateInfo = formatUpdateInfo(row.actor, row.last_update_at);
                          return updateInfo ? (
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <span className="inline-flex items-center justify-center relative">
                                  <WrenchIcon className="w-5 h-5 text-blue-500 cursor-pointer" />
                                  <span className="absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full border border-white shadow"></span>
                                </span>
                              </TooltipTrigger>
                              <TooltipContent>{updateInfo}</TooltipContent>
                            </Tooltip>
                          ) : (
                            <span className="text-gray-400">--</span>
                          );
                        })()}
                      </TableCell>
                      <TableCell className="px-3 py-2 text-center"><span className={row.is_send && row.is_repeat ? "font-semibold text-green-600" : row.is_send && !row.is_repeat ? "font-semibold text-blue-600" : !row.is_send && row.is_repeat ? "font-semibold text-orange-500" : "font-semibold text-gray-500"}>{row.is_send && row.is_repeat ? "ƒêang Ho·∫°t ƒê·ªông" : row.is_send && !row.is_repeat ? "Ch·ªâ Nh·∫Øc N·ª£" : !row.is_send && row.is_repeat ? "Ch·ªâ G·ª≠i Sau 15 Ph√∫t" : "Kh√¥ng G·ª≠i Nh·∫Øc"}</span></TableCell>
                      <TableCell className="px-3 py-2 text-center flex items-center justify-center gap-2">
                        {/* Icon con m·∫Øt xem chi ti·∫øt */}
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button
                              type="button"
                              className="p-1 rounded hover:bg-gray-100 focus:outline-none cursor-pointer"
                              aria-label="Xem Chi Ti·∫øt C√¥ng N·ª£"
                              onClick={() => handleViewDetail(row)}
                            >
                              <EyeIcon className="w-5 h-5 text-blue-500" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent>Xem Chi Ti·∫øt C√¥ng N·ª£</TooltipContent>
                        </Tooltip>
                        {/* Switch g·ª≠i t·ª± ƒë·ªông */}
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <span>
                              <Switch
                                checked={!!row.is_send}
                                onClick={e => {
                                  e.preventDefault();
                                  handleSwitchClick(row, 'send', !row.is_send);
                                }}
                              />
                            </span>
                          </TooltipTrigger>
                          <TooltipContent>B·∫≠t/T·∫Øt g·ª≠i t·ª± ƒë·ªông</TooltipContent>
                        </Tooltip>
                        {/* Switch g·ª≠i nh·∫Øc l·∫°i */}
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <span>
                              <Switch
                                checked={!!row.is_repeat}
                                disabled={!row.is_send}
                                onClick={e => {
                                  e.preventDefault();
                                  if (row.is_send) handleSwitchClick(row, 'repeat', !row.is_repeat);
                                }}
                              />
                            </span>
                          </TooltipTrigger>
                          <TooltipContent>B·∫≠t/T·∫Øt g·ª≠i nh·∫Øc l·∫°i</TooltipContent>
                        </Tooltip>
                        <Button size="sm" variant="edit" onClick={() => handleEdit(row)}>S·ª≠a</Button>
                        <Button size="sm" variant="delete" onClick={() => setDeleteState({ open: true, row })}>X√≥a</Button>
                      </TableCell>
                    </TableRow>
                  </TooltipTrigger>
                  <TooltipContent>M√£ kh√°ch h√†ng kh√¥ng tr√πng so v·ªõi phi·∫øu n·ª£</TooltipContent>
                </Tooltip>
              );
            }
            return (
              <TableRow key={row.id || idx} className={rowClass}>
                <TableCell className="text-center px-3 py-2">{(page - 1) * pageSize + idx + 1}</TableCell>
                <TableCell className="px-3 py-2 text-left">{row.customer_code}</TableCell>
                <TableCell className="px-3 py-2 text-left">{row.customer_name || "--"}</TableCell>
                <TableCell className="px-3 py-2 text-center">{totalBills}</TableCell>
                <TableCell className="px-3 py-2 text-center">{totalDebt}</TableCell>
                <TableCell className="px-3 py-2 text-center">{customerType}</TableCell>
                <TableCell className="px-3 py-2 text-center">{remindSchedule}</TableCell>
                <TableCell className="px-3 py-2 text-center">
                  {row.send_last_at ? (
                    <>
                      <div>{lastRemindedDateStr}</div>
                      <div className="text-xs text-gray-500">{lastRemindedDateTime}</div>
                    </>
                  ) : <span className="text-gray-400 italic">Ch∆∞a Nh·∫Øc N·ª£</span>}
                </TableCell>
                <TableCell className={`px-3 py-2 text-center ${remindStatusColor}`}>{remindStatus}</TableCell>
                <TableCell className="px-3 py-2 text-center">
                  {(() => {
                    const updateInfo = formatUpdateInfo(row.actor, row.last_update_at);
                    return updateInfo ? (
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <span className="inline-flex items-center justify-center relative">
                            <WrenchIcon className="w-5 h-5 text-blue-500 cursor-pointer" />
                            <span className="absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full border border-white shadow"></span>
                          </span>
                        </TooltipTrigger>
                        <TooltipContent>{updateInfo}</TooltipContent>
                      </Tooltip>
                    ) : (
                      <span className="text-gray-400">--</span>
                    );
                  })()}
                </TableCell>
                <TableCell className="px-3 py-2 text-center">
                  {/* Tr·∫°ng th√°i ho·∫°t ƒë·ªông */}
                  <span
                    className={
                      row.is_send && row.is_repeat
                        ? "font-semibold text-green-600"
                        : row.is_send && !row.is_repeat
                        ? "font-semibold text-blue-600"
                        : !row.is_send && row.is_repeat
                        ? "font-semibold text-orange-500"
                        : "font-semibold text-gray-500"
                    }
                  >
                    {row.is_send && row.is_repeat
                      ? "ƒêang Ho·∫°t ƒê·ªông"
                      : row.is_send && !row.is_repeat
                      ? "Ch·ªâ Nh·∫Øc N·ª£"
                      : !row.is_send && row.is_repeat
                      ? "Ch·ªâ G·ª≠i Sau 15 Ph√∫t"
                      : "Kh√¥ng G·ª≠i Nh·∫Øc"}
                  </span>
                </TableCell>
                <TableCell className="px-3 py-2 text-center flex items-center justify-center gap-2">
                  {/* Icon con m·∫Øt xem chi ti·∫øt */}
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <button 
                        type="button" 
                        className="p-1 rounded hover:bg-gray-100 focus:outline-none cursor-pointer" 
                        aria-label="Xem Chi Ti·∫øt C√¥ng N·ª£"
                        onClick={() => handleViewDetail(row)}
                      >
                        <EyeIcon className="w-5 h-5 text-blue-500" />
                      </button>
                    </TooltipTrigger>
                    <TooltipContent>Xem Chi Ti·∫øt C√¥ng N·ª£</TooltipContent>
                  </Tooltip>
                  {/* Switch g·ª≠i t·ª± ƒë·ªông */}
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <span>
                        <Switch
                          checked={!!row.is_send}
                          onClick={e => {
                            e.preventDefault();
                            handleSwitchClick(row, 'send', !row.is_send);
                          }}
                        />
                      </span>
                    </TooltipTrigger>
                    <TooltipContent>B·∫≠t/T·∫Øt g·ª≠i t·ª± ƒë·ªông</TooltipContent>
                  </Tooltip>
                  {/* Switch g·ª≠i nh·∫Øc l·∫°i */}
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <span>
                        <Switch
                          checked={!!row.is_repeat}
                          disabled={!row.is_send}
                          onClick={e => {
                            e.preventDefault();
                            if (row.is_send) handleSwitchClick(row, 'repeat', !row.is_repeat);
                          }}
                        />
                      </span>
                    </TooltipTrigger>
                    <TooltipContent>B·∫≠t/T·∫Øt g·ª≠i nh·∫Øc l·∫°i</TooltipContent>
                  </Tooltip>
                  <Button size="sm" variant="edit" onClick={() => handleEdit(row)}>S·ª≠a</Button>
                  <Button size="sm" variant="delete" onClick={() => setDeleteState({ open: true, row })}>X√≥a</Button>
                </TableCell>
              </TableRow>
            );
          })}
        </TableBody>
      </Table>
      <ConfirmDialog
        isOpen={confirmState.open}
        title={confirmState.type === 'send' ? 'X√°c nh·∫≠n thay ƒë·ªïi g·ª≠i t·ª± ƒë·ªông' : 'X√°c nh·∫≠n thay ƒë·ªïi g·ª≠i nh·∫Øc l·∫°i'}
        message={`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ${confirmState.nextValue ? 'b·∫≠t' : 't·∫Øt'} ch·ª©c nƒÉng ${confirmState.type === 'send' ? 'g·ª≠i t·ª± ƒë·ªông' : 'g·ª≠i nh·∫Øc l·∫°i'} cho kh√°ch h√†ng n√†y?`}
        onConfirm={handleConfirm}
        onCancel={handleCancel}
      />
      <ConfirmDialog
        isOpen={deleteState.open}
        title="X√°c nh·∫≠n x√≥a c·∫•u h√¨nh c√¥ng n·ª£"
        message="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c·∫•u h√¨nh n√†y?"
        onConfirm={async () => {
          if (!deleteState.row) return;
          try {
            const token = getAccessToken();
            const headers = token ? { Authorization: `Bearer ${token}` } : {};
            await axios.delete(`${API_BASE_URL}/debt-configs/${deleteState.row.id}`, { headers });
            setAlert({ type: 'success', message: 'X√≥a th√†nh c√¥ng!' });
            if (onDelete) onDelete(deleteState.row.id);
          } catch {
            setAlert({ type: 'error', message: 'X√≥a th·∫•t b·∫°i!' });
          }
          setDeleteState({ open: false, row: null });
        }}
        onCancel={() => setDeleteState({ open: false, row: null })}
      />
      <EditDebtConfigModal
        open={editModal.open}
        debtConfigId={editModal.id}
        onClose={() => setEditModal({ open: false, id: null })}
        onSave={(success) => {
          setEditModal({ open: false, id: null });
          if (success && typeof onRefresh === "function") onRefresh();
        }}
        onShowAlert={onShowAlert}
      />
      {alert && (
        <ServerResponseAlert
          type={alert.type}
          message={alert.message}
          onClose={() => setAlert(null)}
        />
      )}
      {/* Dialog xem chi ti·∫øt c√¥ng n·ª£ */}
      <DebtDetailDialog
        open={detailDialog.open}
        onClose={() => setDetailDialog({ open: false, debtConfigId: null })}
        debtConfigId={detailDialog.debtConfigId}
        onShowAlert={onShowAlert}
      />
    </div>
  );
}
